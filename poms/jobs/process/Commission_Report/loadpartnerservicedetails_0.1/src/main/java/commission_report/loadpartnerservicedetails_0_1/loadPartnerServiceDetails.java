// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package commission_report.loadpartnerservicedetails_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: loadPartnerServiceDetails Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status PROD
 */
public class loadPartnerServiceDetails implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "loadPartnerServiceDetails";
	private final String projectName = "COMMISSION_REPORT";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					loadPartnerServiceDetails.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(loadPartnerServiceDetails.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_COMMISSION_REPORT_loadPartnerServiceDetails = new byte[0];
		static byte[] commonByteArray_COMMISSION_REPORT_loadPartnerServiceDetails = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int ID;

		public int getID() {
			return this.ID;
		}

		public String SUBSCR_NO;

		public String getSUBSCR_NO() {
			return this.SUBSCR_NO;
		}

		public Short SERVICE_TYPE;

		public Short getSERVICE_TYPE() {
			return this.SERVICE_TYPE;
		}

		public java.util.Date SERVICE_START_DATE;

		public java.util.Date getSERVICE_START_DATE() {
			return this.SERVICE_START_DATE;
		}

		public java.util.Date SUBMIT_ORDER_DATE;

		public java.util.Date getSUBMIT_ORDER_DATE() {
			return this.SUBMIT_ORDER_DATE;
		}

		public String BA;

		public String getBA() {
			return this.BA;
		}

		public String BA_NAME;

		public String getBA_NAME() {
			return this.BA_NAME;
		}

		public String INVOICE_NO;

		public String getINVOICE_NO() {
			return this.INVOICE_NO;
		}

		public java.util.Date LAST_INVOICE_DATE;

		public java.util.Date getLAST_INVOICE_DATE() {
			return this.LAST_INVOICE_DATE;
		}

		public java.util.Date LAST_PAYMENT_DATE;

		public java.util.Date getLAST_PAYMENT_DATE() {
			return this.LAST_PAYMENT_DATE;
		}

		public BigDecimal TOTAL_INVOICE_AMOUNT;

		public BigDecimal getTOTAL_INVOICE_AMOUNT() {
			return this.TOTAL_INVOICE_AMOUNT;
		}

		public BigDecimal TOTAL_PAYMENT_AMOUNT;

		public BigDecimal getTOTAL_PAYMENT_AMOUNT() {
			return this.TOTAL_PAYMENT_AMOUNT;
		}

		public String FIX_REQUEST;

		public String getFIX_REQUEST() {
			return this.FIX_REQUEST;
		}

		public String FIX_INVOICE;

		public String getFIX_INVOICE() {
			return this.FIX_INVOICE;
		}

		public String CSS_CAT_ID;

		public String getCSS_CAT_ID() {
			return this.CSS_CAT_ID;
		}

		public String PROPERTY_ONE;

		public String getPROPERTY_ONE() {
			return this.PROPERTY_ONE;
		}

		public String PROPERTY_TWO;

		public String getPROPERTY_TWO() {
			return this.PROPERTY_TWO;
		}

		public String CAT_SVC_ID;

		public String getCAT_SVC_ID() {
			return this.CAT_SVC_ID;
		}

		public String PRODUCT_DESC;

		public String getPRODUCT_DESC() {
			return this.PRODUCT_DESC;
		}

		public java.util.Date CREATE_DATE;

		public java.util.Date getCREATE_DATE() {
			return this.CREATE_DATE;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.ID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row1Struct other = (row1Struct) obj;

			if (this.ID != other.ID)
				return false;

			return true;
		}

		public void copyDataTo(row1Struct other) {

			other.ID = this.ID;
			other.SUBSCR_NO = this.SUBSCR_NO;
			other.SERVICE_TYPE = this.SERVICE_TYPE;
			other.SERVICE_START_DATE = this.SERVICE_START_DATE;
			other.SUBMIT_ORDER_DATE = this.SUBMIT_ORDER_DATE;
			other.BA = this.BA;
			other.BA_NAME = this.BA_NAME;
			other.INVOICE_NO = this.INVOICE_NO;
			other.LAST_INVOICE_DATE = this.LAST_INVOICE_DATE;
			other.LAST_PAYMENT_DATE = this.LAST_PAYMENT_DATE;
			other.TOTAL_INVOICE_AMOUNT = this.TOTAL_INVOICE_AMOUNT;
			other.TOTAL_PAYMENT_AMOUNT = this.TOTAL_PAYMENT_AMOUNT;
			other.FIX_REQUEST = this.FIX_REQUEST;
			other.FIX_INVOICE = this.FIX_INVOICE;
			other.CSS_CAT_ID = this.CSS_CAT_ID;
			other.PROPERTY_ONE = this.PROPERTY_ONE;
			other.PROPERTY_TWO = this.PROPERTY_TWO;
			other.CAT_SVC_ID = this.CAT_SVC_ID;
			other.PRODUCT_DESC = this.PRODUCT_DESC;
			other.CREATE_DATE = this.CREATE_DATE;
			other.UPDATE_DATE = this.UPDATE_DATE;

		}

		public void copyKeysDataTo(row1Struct other) {

			other.ID = this.ID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_COMMISSION_REPORT_loadPartnerServiceDetails.length) {
					if (length < 1024 && commonByteArray_COMMISSION_REPORT_loadPartnerServiceDetails.length == 0) {
						commonByteArray_COMMISSION_REPORT_loadPartnerServiceDetails = new byte[1024];
					} else {
						commonByteArray_COMMISSION_REPORT_loadPartnerServiceDetails = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_COMMISSION_REPORT_loadPartnerServiceDetails, 0, length);
				strReturn = new String(commonByteArray_COMMISSION_REPORT_loadPartnerServiceDetails, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_COMMISSION_REPORT_loadPartnerServiceDetails) {

				try {

					int length = 0;

					this.ID = dis.readInt();

					this.SUBSCR_NO = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.SERVICE_TYPE = null;
					} else {
						this.SERVICE_TYPE = dis.readShort();
					}

					this.SERVICE_START_DATE = readDate(dis);

					this.SUBMIT_ORDER_DATE = readDate(dis);

					this.BA = readString(dis);

					this.BA_NAME = readString(dis);

					this.INVOICE_NO = readString(dis);

					this.LAST_INVOICE_DATE = readDate(dis);

					this.LAST_PAYMENT_DATE = readDate(dis);

					this.TOTAL_INVOICE_AMOUNT = (BigDecimal) dis.readObject();

					this.TOTAL_PAYMENT_AMOUNT = (BigDecimal) dis.readObject();

					this.FIX_REQUEST = readString(dis);

					this.FIX_INVOICE = readString(dis);

					this.CSS_CAT_ID = readString(dis);

					this.PROPERTY_ONE = readString(dis);

					this.PROPERTY_TWO = readString(dis);

					this.CAT_SVC_ID = readString(dis);

					this.PRODUCT_DESC = readString(dis);

					this.CREATE_DATE = readDate(dis);

					this.UPDATE_DATE = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ID);

				// String

				writeString(this.SUBSCR_NO, dos);

				// Short

				if (this.SERVICE_TYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.SERVICE_TYPE);
				}

				// java.util.Date

				writeDate(this.SERVICE_START_DATE, dos);

				// java.util.Date

				writeDate(this.SUBMIT_ORDER_DATE, dos);

				// String

				writeString(this.BA, dos);

				// String

				writeString(this.BA_NAME, dos);

				// String

				writeString(this.INVOICE_NO, dos);

				// java.util.Date

				writeDate(this.LAST_INVOICE_DATE, dos);

				// java.util.Date

				writeDate(this.LAST_PAYMENT_DATE, dos);

				// BigDecimal

				dos.writeObject(this.TOTAL_INVOICE_AMOUNT);

				// BigDecimal

				dos.writeObject(this.TOTAL_PAYMENT_AMOUNT);

				// String

				writeString(this.FIX_REQUEST, dos);

				// String

				writeString(this.FIX_INVOICE, dos);

				// String

				writeString(this.CSS_CAT_ID, dos);

				// String

				writeString(this.PROPERTY_ONE, dos);

				// String

				writeString(this.PROPERTY_TWO, dos);

				// String

				writeString(this.CAT_SVC_ID, dos);

				// String

				writeString(this.PRODUCT_DESC, dos);

				// java.util.Date

				writeDate(this.CREATE_DATE, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",SUBSCR_NO=" + SUBSCR_NO);
			sb.append(",SERVICE_TYPE=" + String.valueOf(SERVICE_TYPE));
			sb.append(",SERVICE_START_DATE=" + String.valueOf(SERVICE_START_DATE));
			sb.append(",SUBMIT_ORDER_DATE=" + String.valueOf(SUBMIT_ORDER_DATE));
			sb.append(",BA=" + BA);
			sb.append(",BA_NAME=" + BA_NAME);
			sb.append(",INVOICE_NO=" + INVOICE_NO);
			sb.append(",LAST_INVOICE_DATE=" + String.valueOf(LAST_INVOICE_DATE));
			sb.append(",LAST_PAYMENT_DATE=" + String.valueOf(LAST_PAYMENT_DATE));
			sb.append(",TOTAL_INVOICE_AMOUNT=" + String.valueOf(TOTAL_INVOICE_AMOUNT));
			sb.append(",TOTAL_PAYMENT_AMOUNT=" + String.valueOf(TOTAL_PAYMENT_AMOUNT));
			sb.append(",FIX_REQUEST=" + FIX_REQUEST);
			sb.append(",FIX_INVOICE=" + FIX_INVOICE);
			sb.append(",CSS_CAT_ID=" + CSS_CAT_ID);
			sb.append(",PROPERTY_ONE=" + PROPERTY_ONE);
			sb.append(",PROPERTY_TWO=" + PROPERTY_TWO);
			sb.append(",CAT_SVC_ID=" + CAT_SVC_ID);
			sb.append(",PRODUCT_DESC=" + PRODUCT_DESC);
			sb.append(",CREATE_DATE=" + String.valueOf(CREATE_DATE));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID, other.ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tDBOutput_1 = 0;

				int updateKeyCount_tDBOutput_1 = 1;
				if (updateKeyCount_tDBOutput_1 < 1) {
					throw new RuntimeException("For update, the schema must have a key");
				}
				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int tmp_batchUpdateCount_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;

				boolean whetherReject_tDBOutput_1 = false;

				java.sql.Connection conn_tDBOutput_1 = null;

				// optional table
				String dbschema_tDBOutput_1 = null;
				String tableName_tDBOutput_1 = null;
				String driverClass_tDBOutput_1 = "oracle.jdbc.OracleDriver";

				java.lang.Class.forName(driverClass_tDBOutput_1);
				String url_tDBOutput_1 = null;
				url_tDBOutput_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + "10.44.66.245"
						+ ")(port=" + "1521" + "))(connect_data=(service_name=" + "frontend" + ")))";
				String dbUser_tDBOutput_1 = "a_pms_com";

				final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:oWgVVbpXFGa+AacHe7FaVvTAhQO2Ndjf3+nU4ZNYC6CytN7c");

				String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;
				dbschema_tDBOutput_1 = "A_PMS_COM";

				conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1, dbUser_tDBOutput_1,
						dbPwd_tDBOutput_1);
				resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
				conn_tDBOutput_1.setAutoCommit(false);
				int commitEvery_tDBOutput_1 = 10000;
				int commitCounter_tDBOutput_1 = 0;
				int count_tDBOutput_1 = 0;

				if (dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
					tableName_tDBOutput_1 = ("PARTNER_SERVICE_DETAILS");
				} else {
					tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "." + ("PARTNER_SERVICE_DETAILS");
				}
				String tableNameForSearch_tDBOutput_1 = "" + ((String) "PARTNER_SERVICE_DETAILS") + "";
				String dbschemaForSearch_tDBOutput_1 = null;
				if (dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
					dbschemaForSearch_tDBOutput_1 = ((String) "a_pms_com").toUpperCase();
				} else {
					dbschemaForSearch_tDBOutput_1 = dbschema_tDBOutput_1.toUpperCase();
				}

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_1 = conn_tDBOutput_1.getMetaData();
				if (tableNameForSearch_tDBOutput_1.indexOf("\"") == -1) {
					tableNameForSearch_tDBOutput_1 = tableNameForSearch_tDBOutput_1.toUpperCase();
				} else {
					tableNameForSearch_tDBOutput_1 = tableNameForSearch_tDBOutput_1.replaceAll("\"", "");
				}
				boolean whetherExist_tDBOutput_1 = false;
				try (java.sql.ResultSet rsTable_tDBOutput_1 = dbMetaData_tDBOutput_1.getTables(null,
						dbschemaForSearch_tDBOutput_1, tableNameForSearch_tDBOutput_1, new String[] { "TABLE" })) {
					if (rsTable_tDBOutput_1.next()) {
						whetherExist_tDBOutput_1 = true;
					}
				}

				if (!whetherExist_tDBOutput_1) {
					try (java.sql.Statement stmtCreate_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
						stmtCreate_tDBOutput_1.execute("CREATE TABLE " + tableName_tDBOutput_1
								+ "(ID INT  not null ,SUBSCR_NO VARCHAR(30)   not null ,SERVICE_TYPE SMALLINT ,SERVICE_START_DATE DATE ,SUBMIT_ORDER_DATE DATE ,BA VARCHAR(30)  ,BA_NAME VARCHAR(2500)  ,INVOICE_NO VARCHAR(30)  ,LAST_INVOICE_DATE DATE ,LAST_PAYMENT_DATE DATE ,TOTAL_INVOICE_AMOUNT DECIMAL(20,2)  ,TOTAL_PAYMENT_AMOUNT DECIMAL(20,2)  ,FIX_REQUEST VARCHAR(20)  ,FIX_INVOICE VARCHAR(30)  ,CSS_CAT_ID VARCHAR(150)  ,PROPERTY_ONE VARCHAR(300)  ,PROPERTY_TWO VARCHAR(300)  ,CAT_SVC_ID VARCHAR(120)  ,PRODUCT_DESC VARCHAR(300)  ,CREATE_DATE DATE ,UPDATE_DATE DATE ,primary key(ID))");
					}
				}
				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement("SELECT COUNT(1) FROM " + tableName_tDBOutput_1 + " WHERE ID = ?");
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
				String insert_tDBOutput_1 = "INSERT INTO " + tableName_tDBOutput_1
						+ " (ID,SUBSCR_NO,SERVICE_TYPE,SERVICE_START_DATE,SUBMIT_ORDER_DATE,BA,BA_NAME,INVOICE_NO,LAST_INVOICE_DATE,LAST_PAYMENT_DATE,TOTAL_INVOICE_AMOUNT,TOTAL_PAYMENT_AMOUNT,FIX_REQUEST,FIX_INVOICE,CSS_CAT_ID,PROPERTY_ONE,PROPERTY_TWO,CAT_SVC_ID,PRODUCT_DESC,CREATE_DATE,UPDATE_DATE) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmtInsert_tDBOutput_1", pstmtInsert_tDBOutput_1);
				String update_tDBOutput_1 = "UPDATE " + tableName_tDBOutput_1
						+ " SET SUBSCR_NO = ?,SERVICE_TYPE = ?,SERVICE_START_DATE = ?,SUBMIT_ORDER_DATE = ?,BA = ?,BA_NAME = ?,INVOICE_NO = ?,LAST_INVOICE_DATE = ?,LAST_PAYMENT_DATE = ?,TOTAL_INVOICE_AMOUNT = ?,TOTAL_PAYMENT_AMOUNT = ?,FIX_REQUEST = ?,FIX_INVOICE = ?,CSS_CAT_ID = ?,PROPERTY_ONE = ?,PROPERTY_TWO = ?,CAT_SVC_ID = ?,PRODUCT_DESC = ?,CREATE_DATE = ?,UPDATE_DATE = ? WHERE ID = ?";
				java.sql.PreparedStatement pstmtUpdate_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement(update_tDBOutput_1);
				resourceMap.put("pstmtUpdate_tDBOutput_1", pstmtUpdate_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				java.util.Calendar calendar_tDBInput_1 = java.util.Calendar.getInstance();
				calendar_tDBInput_1.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_1 = calendar_tDBInput_1.getTime();
				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "com.mysql.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = "pms_app";

				final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:Jon+fUqbMLLCblbhh9I+xOcpcfb875uRa6L+cIYr4addV5KV2PY6G2oe");

				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;

				String url_tDBInput_1 = "jdbc:mysql://" + "10.44.49.9" + ":" + "3306" + "/" + "CAT_PM" + "?"
						+ "noDatetimeStringSync=true";

				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1, dbUser_tDBInput_1,
						dbPwd_tDBInput_1);

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

				String dbquery_tDBInput_1 = "SELECT \n  `PARTNER_SERVICE_DETAILS`.`ID`, \n  `PARTNER_SERVICE_DETAILS`.`SUBSCR_NO`, \n  `PARTNER_SERVICE_DETAILS`.`SERVI"
						+ "CE_TYPE`, \n  `PARTNER_SERVICE_DETAILS`.`SERVICE_START_DATE`, \n  `PARTNER_SERVICE_DETAILS`.`SUBMIT_ORDER_DATE`, \n  `PARTN"
						+ "ER_SERVICE_DETAILS`.`BA`, \n  `PARTNER_SERVICE_DETAILS`.`BA_NAME`, \n  `PARTNER_SERVICE_DETAILS`.`INVOICE_NO`, \n  `PARTNER"
						+ "_SERVICE_DETAILS`.`LAST_INVOICE_DATE`, \n  `PARTNER_SERVICE_DETAILS`.`LAST_PAYMENT_DATE`, \n  `PARTNER_SERVICE_DETAILS`.`T"
						+ "OTAL_INVOICE_AMOUNT`, \n  `PARTNER_SERVICE_DETAILS`.`TOTAL_PAYMENT_AMOUNT`, \n  `PARTNER_SERVICE_DETAILS`.`FIX_REQUEST`, \n"
						+ "  `PARTNER_SERVICE_DETAILS`.`FIX_INVOICE`, \n  `PARTNER_SERVICE_DETAILS`.`CSS_CAT_ID`, \n  `PARTNER_SERVICE_DETAILS`.`PROP"
						+ "ERTY_ONE`, \n  `PARTNER_SERVICE_DETAILS`.`PROPERTY_TWO`, \n  `PARTNER_SERVICE_DETAILS`.`CAT_SVC_ID`, \n  `PARTNER_SERVICE_D"
						+ "ETAILS`.`PRODUCT_DESC`, \n  `PARTNER_SERVICE_DETAILS`.`CREATE_DATE`, \n  `PARTNER_SERVICE_DETAILS`.`UPDATE_DATE`\nFROM `PAR"
						+ "TNER_SERVICE_DETAILS`";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row1.ID = 0;
						} else {

							row1.ID = rs_tDBInput_1.getInt(1);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							row1.SUBSCR_NO = null;
						} else {

							row1.SUBSCR_NO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							row1.SERVICE_TYPE = null;
						} else {

							row1.SERVICE_TYPE = rs_tDBInput_1.getShort(3);
							if (rs_tDBInput_1.wasNull()) {
								row1.SERVICE_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 4) {
							row1.SERVICE_START_DATE = null;
						} else {

							if (rs_tDBInput_1.getString(4) != null) {
								String dateString_tDBInput_1 = rs_tDBInput_1.getString(4);
								if (!("0000-00-00").equals(dateString_tDBInput_1)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
									row1.SERVICE_START_DATE = rs_tDBInput_1.getTimestamp(4);
								} else {
									row1.SERVICE_START_DATE = (java.util.Date) year0_tDBInput_1.clone();
								}
							} else {
								row1.SERVICE_START_DATE = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 5) {
							row1.SUBMIT_ORDER_DATE = null;
						} else {

							if (rs_tDBInput_1.getString(5) != null) {
								String dateString_tDBInput_1 = rs_tDBInput_1.getString(5);
								if (!("0000-00-00").equals(dateString_tDBInput_1)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
									row1.SUBMIT_ORDER_DATE = rs_tDBInput_1.getTimestamp(5);
								} else {
									row1.SUBMIT_ORDER_DATE = (java.util.Date) year0_tDBInput_1.clone();
								}
							} else {
								row1.SUBMIT_ORDER_DATE = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 6) {
							row1.BA = null;
						} else {

							row1.BA = routines.system.JDBCUtil.getString(rs_tDBInput_1, 6, false);
						}
						if (colQtyInRs_tDBInput_1 < 7) {
							row1.BA_NAME = null;
						} else {

							row1.BA_NAME = routines.system.JDBCUtil.getString(rs_tDBInput_1, 7, false);
						}
						if (colQtyInRs_tDBInput_1 < 8) {
							row1.INVOICE_NO = null;
						} else {

							row1.INVOICE_NO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 8, false);
						}
						if (colQtyInRs_tDBInput_1 < 9) {
							row1.LAST_INVOICE_DATE = null;
						} else {

							if (rs_tDBInput_1.getString(9) != null) {
								String dateString_tDBInput_1 = rs_tDBInput_1.getString(9);
								if (!("0000-00-00").equals(dateString_tDBInput_1)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
									row1.LAST_INVOICE_DATE = rs_tDBInput_1.getTimestamp(9);
								} else {
									row1.LAST_INVOICE_DATE = (java.util.Date) year0_tDBInput_1.clone();
								}
							} else {
								row1.LAST_INVOICE_DATE = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 10) {
							row1.LAST_PAYMENT_DATE = null;
						} else {

							if (rs_tDBInput_1.getString(10) != null) {
								String dateString_tDBInput_1 = rs_tDBInput_1.getString(10);
								if (!("0000-00-00").equals(dateString_tDBInput_1)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
									row1.LAST_PAYMENT_DATE = rs_tDBInput_1.getTimestamp(10);
								} else {
									row1.LAST_PAYMENT_DATE = (java.util.Date) year0_tDBInput_1.clone();
								}
							} else {
								row1.LAST_PAYMENT_DATE = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 11) {
							row1.TOTAL_INVOICE_AMOUNT = null;
						} else {

							row1.TOTAL_INVOICE_AMOUNT = rs_tDBInput_1.getBigDecimal(11);
							if (rs_tDBInput_1.wasNull()) {
								row1.TOTAL_INVOICE_AMOUNT = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 12) {
							row1.TOTAL_PAYMENT_AMOUNT = null;
						} else {

							row1.TOTAL_PAYMENT_AMOUNT = rs_tDBInput_1.getBigDecimal(12);
							if (rs_tDBInput_1.wasNull()) {
								row1.TOTAL_PAYMENT_AMOUNT = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 13) {
							row1.FIX_REQUEST = null;
						} else {

							row1.FIX_REQUEST = routines.system.JDBCUtil.getString(rs_tDBInput_1, 13, false);
						}
						if (colQtyInRs_tDBInput_1 < 14) {
							row1.FIX_INVOICE = null;
						} else {

							row1.FIX_INVOICE = routines.system.JDBCUtil.getString(rs_tDBInput_1, 14, false);
						}
						if (colQtyInRs_tDBInput_1 < 15) {
							row1.CSS_CAT_ID = null;
						} else {

							row1.CSS_CAT_ID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 15, false);
						}
						if (colQtyInRs_tDBInput_1 < 16) {
							row1.PROPERTY_ONE = null;
						} else {

							row1.PROPERTY_ONE = routines.system.JDBCUtil.getString(rs_tDBInput_1, 16, false);
						}
						if (colQtyInRs_tDBInput_1 < 17) {
							row1.PROPERTY_TWO = null;
						} else {

							row1.PROPERTY_TWO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 17, false);
						}
						if (colQtyInRs_tDBInput_1 < 18) {
							row1.CAT_SVC_ID = null;
						} else {

							row1.CAT_SVC_ID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 18, false);
						}
						if (colQtyInRs_tDBInput_1 < 19) {
							row1.PRODUCT_DESC = null;
						} else {

							row1.PRODUCT_DESC = routines.system.JDBCUtil.getString(rs_tDBInput_1, 19, false);
						}
						if (colQtyInRs_tDBInput_1 < 20) {
							row1.CREATE_DATE = null;
						} else {

							if (rs_tDBInput_1.getString(20) != null) {
								String dateString_tDBInput_1 = rs_tDBInput_1.getString(20);
								if (!("0000-00-00").equals(dateString_tDBInput_1)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
									row1.CREATE_DATE = rs_tDBInput_1.getTimestamp(20);
								} else {
									row1.CREATE_DATE = (java.util.Date) year0_tDBInput_1.clone();
								}
							} else {
								row1.CREATE_DATE = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 21) {
							row1.UPDATE_DATE = null;
						} else {

							if (rs_tDBInput_1.getString(21) != null) {
								String dateString_tDBInput_1 = rs_tDBInput_1.getString(21);
								if (!("0000-00-00").equals(dateString_tDBInput_1)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
									row1.UPDATE_DATE = rs_tDBInput_1.getTimestamp(21);
								} else {
									row1.UPDATE_DATE = (java.util.Date) year0_tDBInput_1.clone();
								}
							} else {
								row1.UPDATE_DATE = null;
							}
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_1 main ] start
						 */

						currentComponent = "tDBOutput_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row1");
						}

						whetherReject_tDBOutput_1 = false;
						pstmt_tDBOutput_1.setInt(1, row1.ID);

						int checkCount_tDBOutput_1 = -1;
						try (java.sql.ResultSet rs_tDBOutput_1 = pstmt_tDBOutput_1.executeQuery()) {
							while (rs_tDBOutput_1.next()) {
								checkCount_tDBOutput_1 = rs_tDBOutput_1.getInt(1);
							}
						}
						if (checkCount_tDBOutput_1 > 0) {
							if (row1.SUBSCR_NO == null) {
								pstmtUpdate_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_1.setString(1, row1.SUBSCR_NO);
							}

							if (row1.SERVICE_TYPE == null) {
								pstmtUpdate_tDBOutput_1.setNull(2, java.sql.Types.INTEGER);
							} else {
								pstmtUpdate_tDBOutput_1.setShort(2, row1.SERVICE_TYPE);
							}

							if (row1.SERVICE_START_DATE != null) {
								pstmtUpdate_tDBOutput_1.setObject(3,
										new java.sql.Timestamp(row1.SERVICE_START_DATE.getTime()), java.sql.Types.DATE);
							} else {
								pstmtUpdate_tDBOutput_1.setNull(3, java.sql.Types.DATE);
							}

							if (row1.SUBMIT_ORDER_DATE != null) {
								pstmtUpdate_tDBOutput_1.setObject(4,
										new java.sql.Timestamp(row1.SUBMIT_ORDER_DATE.getTime()), java.sql.Types.DATE);
							} else {
								pstmtUpdate_tDBOutput_1.setNull(4, java.sql.Types.DATE);
							}

							if (row1.BA == null) {
								pstmtUpdate_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_1.setString(5, row1.BA);
							}

							if (row1.BA_NAME == null) {
								pstmtUpdate_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_1.setString(6, row1.BA_NAME);
							}

							if (row1.INVOICE_NO == null) {
								pstmtUpdate_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_1.setString(7, row1.INVOICE_NO);
							}

							if (row1.LAST_INVOICE_DATE != null) {
								pstmtUpdate_tDBOutput_1.setObject(8,
										new java.sql.Timestamp(row1.LAST_INVOICE_DATE.getTime()), java.sql.Types.DATE);
							} else {
								pstmtUpdate_tDBOutput_1.setNull(8, java.sql.Types.DATE);
							}

							if (row1.LAST_PAYMENT_DATE != null) {
								pstmtUpdate_tDBOutput_1.setObject(9,
										new java.sql.Timestamp(row1.LAST_PAYMENT_DATE.getTime()), java.sql.Types.DATE);
							} else {
								pstmtUpdate_tDBOutput_1.setNull(9, java.sql.Types.DATE);
							}

							pstmtUpdate_tDBOutput_1.setBigDecimal(10, row1.TOTAL_INVOICE_AMOUNT);

							pstmtUpdate_tDBOutput_1.setBigDecimal(11, row1.TOTAL_PAYMENT_AMOUNT);

							if (row1.FIX_REQUEST == null) {
								pstmtUpdate_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_1.setString(12, row1.FIX_REQUEST);
							}

							if (row1.FIX_INVOICE == null) {
								pstmtUpdate_tDBOutput_1.setNull(13, java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_1.setString(13, row1.FIX_INVOICE);
							}

							if (row1.CSS_CAT_ID == null) {
								pstmtUpdate_tDBOutput_1.setNull(14, java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_1.setString(14, row1.CSS_CAT_ID);
							}

							if (row1.PROPERTY_ONE == null) {
								pstmtUpdate_tDBOutput_1.setNull(15, java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_1.setString(15, row1.PROPERTY_ONE);
							}

							if (row1.PROPERTY_TWO == null) {
								pstmtUpdate_tDBOutput_1.setNull(16, java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_1.setString(16, row1.PROPERTY_TWO);
							}

							if (row1.CAT_SVC_ID == null) {
								pstmtUpdate_tDBOutput_1.setNull(17, java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_1.setString(17, row1.CAT_SVC_ID);
							}

							if (row1.PRODUCT_DESC == null) {
								pstmtUpdate_tDBOutput_1.setNull(18, java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_1.setString(18, row1.PRODUCT_DESC);
							}

							if (row1.CREATE_DATE != null) {
								pstmtUpdate_tDBOutput_1.setObject(19,
										new java.sql.Timestamp(row1.CREATE_DATE.getTime()), java.sql.Types.DATE);
							} else {
								pstmtUpdate_tDBOutput_1.setNull(19, java.sql.Types.DATE);
							}

							if (row1.UPDATE_DATE != null) {
								pstmtUpdate_tDBOutput_1.setObject(20,
										new java.sql.Timestamp(row1.UPDATE_DATE.getTime()), java.sql.Types.DATE);
							} else {
								pstmtUpdate_tDBOutput_1.setNull(20, java.sql.Types.DATE);
							}

							pstmtUpdate_tDBOutput_1.setInt(21 + count_tDBOutput_1, row1.ID);

							try {
								updatedCount_tDBOutput_1 = updatedCount_tDBOutput_1
										+ pstmtUpdate_tDBOutput_1.executeUpdate();
								nb_line_tDBOutput_1++;
							} catch (java.lang.Exception e_tDBOutput_1) {
								whetherReject_tDBOutput_1 = true;
								nb_line_tDBOutput_1++;
								System.err.print(e_tDBOutput_1.getMessage());
							}
						} else {
							pstmtInsert_tDBOutput_1.setInt(1, row1.ID);

							if (row1.SUBSCR_NO == null) {
								pstmtInsert_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tDBOutput_1.setString(2, row1.SUBSCR_NO);
							}

							if (row1.SERVICE_TYPE == null) {
								pstmtInsert_tDBOutput_1.setNull(3, java.sql.Types.INTEGER);
							} else {
								pstmtInsert_tDBOutput_1.setShort(3, row1.SERVICE_TYPE);
							}

							if (row1.SERVICE_START_DATE != null) {
								pstmtInsert_tDBOutput_1.setObject(4,
										new java.sql.Timestamp(row1.SERVICE_START_DATE.getTime()), java.sql.Types.DATE);
							} else {
								pstmtInsert_tDBOutput_1.setNull(4, java.sql.Types.DATE);
							}

							if (row1.SUBMIT_ORDER_DATE != null) {
								pstmtInsert_tDBOutput_1.setObject(5,
										new java.sql.Timestamp(row1.SUBMIT_ORDER_DATE.getTime()), java.sql.Types.DATE);
							} else {
								pstmtInsert_tDBOutput_1.setNull(5, java.sql.Types.DATE);
							}

							if (row1.BA == null) {
								pstmtInsert_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tDBOutput_1.setString(6, row1.BA);
							}

							if (row1.BA_NAME == null) {
								pstmtInsert_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tDBOutput_1.setString(7, row1.BA_NAME);
							}

							if (row1.INVOICE_NO == null) {
								pstmtInsert_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tDBOutput_1.setString(8, row1.INVOICE_NO);
							}

							if (row1.LAST_INVOICE_DATE != null) {
								pstmtInsert_tDBOutput_1.setObject(9,
										new java.sql.Timestamp(row1.LAST_INVOICE_DATE.getTime()), java.sql.Types.DATE);
							} else {
								pstmtInsert_tDBOutput_1.setNull(9, java.sql.Types.DATE);
							}

							if (row1.LAST_PAYMENT_DATE != null) {
								pstmtInsert_tDBOutput_1.setObject(10,
										new java.sql.Timestamp(row1.LAST_PAYMENT_DATE.getTime()), java.sql.Types.DATE);
							} else {
								pstmtInsert_tDBOutput_1.setNull(10, java.sql.Types.DATE);
							}

							pstmtInsert_tDBOutput_1.setBigDecimal(11, row1.TOTAL_INVOICE_AMOUNT);

							pstmtInsert_tDBOutput_1.setBigDecimal(12, row1.TOTAL_PAYMENT_AMOUNT);

							if (row1.FIX_REQUEST == null) {
								pstmtInsert_tDBOutput_1.setNull(13, java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tDBOutput_1.setString(13, row1.FIX_REQUEST);
							}

							if (row1.FIX_INVOICE == null) {
								pstmtInsert_tDBOutput_1.setNull(14, java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tDBOutput_1.setString(14, row1.FIX_INVOICE);
							}

							if (row1.CSS_CAT_ID == null) {
								pstmtInsert_tDBOutput_1.setNull(15, java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tDBOutput_1.setString(15, row1.CSS_CAT_ID);
							}

							if (row1.PROPERTY_ONE == null) {
								pstmtInsert_tDBOutput_1.setNull(16, java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tDBOutput_1.setString(16, row1.PROPERTY_ONE);
							}

							if (row1.PROPERTY_TWO == null) {
								pstmtInsert_tDBOutput_1.setNull(17, java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tDBOutput_1.setString(17, row1.PROPERTY_TWO);
							}

							if (row1.CAT_SVC_ID == null) {
								pstmtInsert_tDBOutput_1.setNull(18, java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tDBOutput_1.setString(18, row1.CAT_SVC_ID);
							}

							if (row1.PRODUCT_DESC == null) {
								pstmtInsert_tDBOutput_1.setNull(19, java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tDBOutput_1.setString(19, row1.PRODUCT_DESC);
							}

							if (row1.CREATE_DATE != null) {
								pstmtInsert_tDBOutput_1.setObject(20,
										new java.sql.Timestamp(row1.CREATE_DATE.getTime()), java.sql.Types.DATE);
							} else {
								pstmtInsert_tDBOutput_1.setNull(20, java.sql.Types.DATE);
							}

							if (row1.UPDATE_DATE != null) {
								pstmtInsert_tDBOutput_1.setObject(21,
										new java.sql.Timestamp(row1.UPDATE_DATE.getTime()), java.sql.Types.DATE);
							} else {
								pstmtInsert_tDBOutput_1.setNull(21, java.sql.Types.DATE);
							}

							try {
								insertedCount_tDBOutput_1 = insertedCount_tDBOutput_1
										+ pstmtInsert_tDBOutput_1.executeUpdate();
								nb_line_tDBOutput_1++;
							} catch (java.lang.Exception e_tDBOutput_1) {
								whetherReject_tDBOutput_1 = true;
								nb_line_tDBOutput_1++;
								System.err.print(e_tDBOutput_1.getMessage());
							}
						}
						commitCounter_tDBOutput_1++;
						if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {

							conn_tDBOutput_1.commit();
							commitCounter_tDBOutput_1 = 0;
						}

						tos_count_tDBOutput_1++;

						/**
						 * [tDBOutput_1 main ] stop
						 */

						/**
						 * [tDBOutput_1 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_1";

						/**
						 * [tDBOutput_1 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_1 process_data_end ] start
						 */

						currentComponent = "tDBOutput_1";

						/**
						 * [tDBOutput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
					if (conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {

						conn_tDBInput_1.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}

				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				if (pstmtUpdate_tDBOutput_1 != null) {
					pstmtUpdate_tDBOutput_1.close();
					resourceMap.remove("pstmtUpdate_tDBOutput_1");
				}
				if (pstmtInsert_tDBOutput_1 != null) {
					pstmtInsert_tDBOutput_1.close();
					resourceMap.remove("pstmtInsert_tDBOutput_1");
				}
				if (pstmt_tDBOutput_1 != null) {
					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");
				}
				resourceMap.put("statementClosed_tDBOutput_1", true);
				if (commitCounter_tDBOutput_1 > 0) {

					conn_tDBOutput_1.commit();

				}

				conn_tDBOutput_1.close();

				resourceMap.put("finish_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
						java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_1 = null;
						if ((pstmtUpdateToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtUpdate_tDBOutput_1")) != null) {
							pstmtUpdateToClose_tDBOutput_1.close();
						}
						java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_1 = null;
						if ((pstmtInsertToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtInsert_tDBOutput_1")) != null) {
							pstmtInsertToClose_tDBOutput_1.close();
						}
						java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
						if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_1")) != null) {
							pstmtToClose_tDBOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_1") == null) {
						java.sql.Connection ctn_tDBOutput_1 = null;
						if ((ctn_tDBOutput_1 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_1")) != null) {
							try {
								ctn_tDBOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_1) {
								String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :"
										+ sqlEx_tDBOutput_1.getMessage();
								System.err.println(errorMessage_tDBOutput_1);
							}
						}
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final loadPartnerServiceDetails loadPartnerServiceDetailsClass = new loadPartnerServiceDetails();

		int exitCode = loadPartnerServiceDetailsClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = loadPartnerServiceDetails.class.getClassLoader().getResourceAsStream(
					"commission_report/loadpartnerservicedetails_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = loadPartnerServiceDetails.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_1) {
			globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

			e_tDBInput_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : loadPartnerServiceDetails");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 69014 characters generated by Talend Open Studio for Data Integration on the
 * April 4, 2021 6:38:26 PM ICT
 ************************************************************************************************/