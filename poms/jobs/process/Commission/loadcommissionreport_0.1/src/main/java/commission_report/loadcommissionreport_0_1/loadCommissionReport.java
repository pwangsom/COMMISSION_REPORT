// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package commission_report.loadcommissionreport_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: loadCommissionReport Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status PROD
 */
public class loadCommissionReport implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}

	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "loadCommissionReport";
	private final String projectName = "COMMISSION_REPORT";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				loadCommissionReport.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(loadCommissionReport.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_COMMISSION_REPORT_loadCommissionReport = new byte[0];
    static byte[] commonByteArray_COMMISSION_REPORT_loadCommissionReport = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int REPORT_ID;

				public int getREPORT_ID () {
					return this.REPORT_ID;
				}
				
			    public java.util.Date REPORT_MONTH_ID;

				public java.util.Date getREPORT_MONTH_ID () {
					return this.REPORT_MONTH_ID;
				}
				
			    public String SAA_CODE;

				public String getSAA_CODE () {
					return this.SAA_CODE;
				}
				
			    public String CA_CODE;

				public String getCA_CODE () {
					return this.CA_CODE;
				}
				
			    public String REPORT_TYPE;

				public String getREPORT_TYPE () {
					return this.REPORT_TYPE;
				}
				
			    public BigDecimal CALCULATED_COMMISSION_AMOUNT;

				public BigDecimal getCALCULATED_COMMISSION_AMOUNT () {
					return this.CALCULATED_COMMISSION_AMOUNT;
				}
				
			    public BigDecimal APPROVED_COMMISSION_AMOUNT;

				public BigDecimal getAPPROVED_COMMISSION_AMOUNT () {
					return this.APPROVED_COMMISSION_AMOUNT;
				}
				
			    public String STATUS;

				public String getSTATUS () {
					return this.STATUS;
				}
				
			    public String REMARK;

				public String getREMARK () {
					return this.REMARK;
				}
				
			    public String USER_STATUS;

				public String getUSER_STATUS () {
					return this.USER_STATUS;
				}
				
			    public String USER_REMARK;

				public String getUSER_REMARK () {
					return this.USER_REMARK;
				}
				
			    public short REVISION;

				public short getREVISION () {
					return this.REVISION;
				}
				
			    public java.util.Date AS_OF_DATE;

				public java.util.Date getAS_OF_DATE () {
					return this.AS_OF_DATE;
				}
				
			    public java.util.Date CREATE_DATE;

				public java.util.Date getCREATE_DATE () {
					return this.CREATE_DATE;
				}
				
			    public java.util.Date UPDATE_DATE;

				public java.util.Date getUPDATE_DATE () {
					return this.UPDATE_DATE;
				}
				
			    public String FINANCE_USER_APPROVE;

				public String getFINANCE_USER_APPROVE () {
					return this.FINANCE_USER_APPROVE;
				}
				
			    public java.util.Date FINANCE_APPROVE_DATE;

				public java.util.Date getFINANCE_APPROVE_DATE () {
					return this.FINANCE_APPROVE_DATE;
				}
				
			    public String SALE_USER_APPROVE;

				public String getSALE_USER_APPROVE () {
					return this.SALE_USER_APPROVE;
				}
				
			    public java.util.Date SALE_APPROVE_DATE;

				public java.util.Date getSALE_APPROVE_DATE () {
					return this.SALE_APPROVE_DATE;
				}
				
			    public String SALE_SAP_CODE;

				public String getSALE_SAP_CODE () {
					return this.SALE_SAP_CODE;
				}
				
			    public String ORG_CODE;

				public String getORG_CODE () {
					return this.ORG_CODE;
				}
				
			    public Long SERVICE_AMOUNT;

				public Long getSERVICE_AMOUNT () {
					return this.SERVICE_AMOUNT;
				}
				
			    public BigDecimal REPORT_VALUE;

				public BigDecimal getREPORT_VALUE () {
					return this.REPORT_VALUE;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.REPORT_ID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row1Struct other = (row1Struct) obj;
		
						if (this.REPORT_ID != other.REPORT_ID)
							return false;
					

		return true;
    }

	public void copyDataTo(row1Struct other) {

		other.REPORT_ID = this.REPORT_ID;
	            other.REPORT_MONTH_ID = this.REPORT_MONTH_ID;
	            other.SAA_CODE = this.SAA_CODE;
	            other.CA_CODE = this.CA_CODE;
	            other.REPORT_TYPE = this.REPORT_TYPE;
	            other.CALCULATED_COMMISSION_AMOUNT = this.CALCULATED_COMMISSION_AMOUNT;
	            other.APPROVED_COMMISSION_AMOUNT = this.APPROVED_COMMISSION_AMOUNT;
	            other.STATUS = this.STATUS;
	            other.REMARK = this.REMARK;
	            other.USER_STATUS = this.USER_STATUS;
	            other.USER_REMARK = this.USER_REMARK;
	            other.REVISION = this.REVISION;
	            other.AS_OF_DATE = this.AS_OF_DATE;
	            other.CREATE_DATE = this.CREATE_DATE;
	            other.UPDATE_DATE = this.UPDATE_DATE;
	            other.FINANCE_USER_APPROVE = this.FINANCE_USER_APPROVE;
	            other.FINANCE_APPROVE_DATE = this.FINANCE_APPROVE_DATE;
	            other.SALE_USER_APPROVE = this.SALE_USER_APPROVE;
	            other.SALE_APPROVE_DATE = this.SALE_APPROVE_DATE;
	            other.SALE_SAP_CODE = this.SALE_SAP_CODE;
	            other.ORG_CODE = this.ORG_CODE;
	            other.SERVICE_AMOUNT = this.SERVICE_AMOUNT;
	            other.REPORT_VALUE = this.REPORT_VALUE;
	            
	}

	public void copyKeysDataTo(row1Struct other) {

		other.REPORT_ID = this.REPORT_ID;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMMISSION_REPORT_loadCommissionReport.length) {
				if(length < 1024 && commonByteArray_COMMISSION_REPORT_loadCommissionReport.length == 0) {
   					commonByteArray_COMMISSION_REPORT_loadCommissionReport = new byte[1024];
				} else {
   					commonByteArray_COMMISSION_REPORT_loadCommissionReport = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMMISSION_REPORT_loadCommissionReport, 0, length);
			strReturn = new String(commonByteArray_COMMISSION_REPORT_loadCommissionReport, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMMISSION_REPORT_loadCommissionReport) {

        	try {

        		int length = 0;
		
			        this.REPORT_ID = dis.readInt();
					
					this.REPORT_MONTH_ID = readDate(dis);
					
					this.SAA_CODE = readString(dis);
					
					this.CA_CODE = readString(dis);
					
					this.REPORT_TYPE = readString(dis);
					
						this.CALCULATED_COMMISSION_AMOUNT = (BigDecimal) dis.readObject();
					
						this.APPROVED_COMMISSION_AMOUNT = (BigDecimal) dis.readObject();
					
					this.STATUS = readString(dis);
					
					this.REMARK = readString(dis);
					
					this.USER_STATUS = readString(dis);
					
					this.USER_REMARK = readString(dis);
					
			        this.REVISION = dis.readShort();
					
					this.AS_OF_DATE = readDate(dis);
					
					this.CREATE_DATE = readDate(dis);
					
					this.UPDATE_DATE = readDate(dis);
					
					this.FINANCE_USER_APPROVE = readString(dis);
					
					this.FINANCE_APPROVE_DATE = readDate(dis);
					
					this.SALE_USER_APPROVE = readString(dis);
					
					this.SALE_APPROVE_DATE = readDate(dis);
					
					this.SALE_SAP_CODE = readString(dis);
					
					this.ORG_CODE = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SERVICE_AMOUNT = null;
           				} else {
           			    	this.SERVICE_AMOUNT = dis.readLong();
           				}
					
						this.REPORT_VALUE = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.REPORT_ID);
					
					// java.util.Date
				
						writeDate(this.REPORT_MONTH_ID,dos);
					
					// String
				
						writeString(this.SAA_CODE,dos);
					
					// String
				
						writeString(this.CA_CODE,dos);
					
					// String
				
						writeString(this.REPORT_TYPE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CALCULATED_COMMISSION_AMOUNT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APPROVED_COMMISSION_AMOUNT);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// String
				
						writeString(this.REMARK,dos);
					
					// String
				
						writeString(this.USER_STATUS,dos);
					
					// String
				
						writeString(this.USER_REMARK,dos);
					
					// short
				
		            	dos.writeShort(this.REVISION);
					
					// java.util.Date
				
						writeDate(this.AS_OF_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.CREATE_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATE_DATE,dos);
					
					// String
				
						writeString(this.FINANCE_USER_APPROVE,dos);
					
					// java.util.Date
				
						writeDate(this.FINANCE_APPROVE_DATE,dos);
					
					// String
				
						writeString(this.SALE_USER_APPROVE,dos);
					
					// java.util.Date
				
						writeDate(this.SALE_APPROVE_DATE,dos);
					
					// String
				
						writeString(this.SALE_SAP_CODE,dos);
					
					// String
				
						writeString(this.ORG_CODE,dos);
					
					// Long
				
						if(this.SERVICE_AMOUNT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.SERVICE_AMOUNT);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.REPORT_VALUE);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("REPORT_ID="+String.valueOf(REPORT_ID));
		sb.append(",REPORT_MONTH_ID="+String.valueOf(REPORT_MONTH_ID));
		sb.append(",SAA_CODE="+SAA_CODE);
		sb.append(",CA_CODE="+CA_CODE);
		sb.append(",REPORT_TYPE="+REPORT_TYPE);
		sb.append(",CALCULATED_COMMISSION_AMOUNT="+String.valueOf(CALCULATED_COMMISSION_AMOUNT));
		sb.append(",APPROVED_COMMISSION_AMOUNT="+String.valueOf(APPROVED_COMMISSION_AMOUNT));
		sb.append(",STATUS="+STATUS);
		sb.append(",REMARK="+REMARK);
		sb.append(",USER_STATUS="+USER_STATUS);
		sb.append(",USER_REMARK="+USER_REMARK);
		sb.append(",REVISION="+String.valueOf(REVISION));
		sb.append(",AS_OF_DATE="+String.valueOf(AS_OF_DATE));
		sb.append(",CREATE_DATE="+String.valueOf(CREATE_DATE));
		sb.append(",UPDATE_DATE="+String.valueOf(UPDATE_DATE));
		sb.append(",FINANCE_USER_APPROVE="+FINANCE_USER_APPROVE);
		sb.append(",FINANCE_APPROVE_DATE="+String.valueOf(FINANCE_APPROVE_DATE));
		sb.append(",SALE_USER_APPROVE="+SALE_USER_APPROVE);
		sb.append(",SALE_APPROVE_DATE="+String.valueOf(SALE_APPROVE_DATE));
		sb.append(",SALE_SAP_CODE="+SALE_SAP_CODE);
		sb.append(",ORG_CODE="+ORG_CODE);
		sb.append(",SERVICE_AMOUNT="+String.valueOf(SERVICE_AMOUNT));
		sb.append(",REPORT_VALUE="+String.valueOf(REPORT_VALUE));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.REPORT_ID, other.REPORT_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();




	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tDBOutput_1 = 0;
		






            int updateKeyCount_tDBOutput_1 = 1;
            if(updateKeyCount_tDBOutput_1 < 1) {
                throw new RuntimeException("For update, the schema must have a key");
            }
    int nb_line_tDBOutput_1 = 0;
    int nb_line_update_tDBOutput_1 = 0;
    int nb_line_inserted_tDBOutput_1 = 0;
    int nb_line_deleted_tDBOutput_1 = 0;
    int nb_line_rejected_tDBOutput_1 = 0;

    int tmp_batchUpdateCount_tDBOutput_1 = 0;

    int deletedCount_tDBOutput_1=0;
    int updatedCount_tDBOutput_1=0;
    int insertedCount_tDBOutput_1=0;
    int rejectedCount_tDBOutput_1=0;

    boolean whetherReject_tDBOutput_1 = false;

    java.sql.Connection conn_tDBOutput_1 = null;

    //optional table
    String dbschema_tDBOutput_1 = null;
    String tableName_tDBOutput_1 = null;
                    String driverClass_tDBOutput_1 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tDBOutput_1);
                String url_tDBOutput_1 = null;
                    url_tDBOutput_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + "10.44.66.245" + ")(port=" + "1521" + "))(connect_data=(service_name=" + "frontend" + ")))";
                String dbUser_tDBOutput_1 = "a_pms_com";
 
	final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:M4lhwQTvzdihXvfaW6E8/96dVaWgl9xghLs1L8EhyYp9lGWI");

                String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;
                dbschema_tDBOutput_1 = "A_PMS_COM";


                    conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1, dbUser_tDBOutput_1, dbPwd_tDBOutput_1);
        resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
            conn_tDBOutput_1.setAutoCommit(false);
            int commitEvery_tDBOutput_1 = 10000;
            int commitCounter_tDBOutput_1 = 0;
        int count_tDBOutput_1=0;

        if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
            tableName_tDBOutput_1 = ("COMMISSION_REPORT");
        } else {
            tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "." + ("COMMISSION_REPORT");
        }
                                String tableNameForSearch_tDBOutput_1= "" + ((String)"COMMISSION_REPORT") + "";
String dbschemaForSearch_tDBOutput_1= null;
if(dbschema_tDBOutput_1== null || dbschema_tDBOutput_1.trim().length() == 0) {
dbschemaForSearch_tDBOutput_1= ((String)"a_pms_com").toUpperCase();
} else {
dbschemaForSearch_tDBOutput_1= dbschema_tDBOutput_1.toUpperCase();
}

                                java.sql.DatabaseMetaData dbMetaData_tDBOutput_1 = conn_tDBOutput_1.getMetaData();
                                if(tableNameForSearch_tDBOutput_1.indexOf("\"")==-1){
                                    tableNameForSearch_tDBOutput_1 = tableNameForSearch_tDBOutput_1.toUpperCase();
                                }else{
                                    tableNameForSearch_tDBOutput_1 = tableNameForSearch_tDBOutput_1.replaceAll("\"","");
                                }
                                boolean whetherExist_tDBOutput_1 = false;
                                try (java.sql.ResultSet rsTable_tDBOutput_1 = dbMetaData_tDBOutput_1.getTables(null, dbschemaForSearch_tDBOutput_1, tableNameForSearch_tDBOutput_1, new String[]{"TABLE"})) {
                                    if(rsTable_tDBOutput_1.next()) {
                                        whetherExist_tDBOutput_1 = true;
                                    }
                                }

                                if(!whetherExist_tDBOutput_1) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
                                        stmtCreate_tDBOutput_1.execute("CREATE TABLE " + tableName_tDBOutput_1 + "(REPORT_ID INT  not null ,REPORT_MONTH_ID DATE ,SAA_CODE VARCHAR(20)  ,CA_CODE VARCHAR(20)  ,REPORT_TYPE VARCHAR(50)  ,CALCULATED_COMMISSION_AMOUNT DECIMAL(20,2)  ,APPROVED_COMMISSION_AMOUNT DECIMAL(20,2)  ,STATUS VARCHAR(50)  ,REMARK CLOB ,USER_STATUS VARCHAR(50)  ,USER_REMARK CLOB ,REVISION SMALLINT default 1  not null ,AS_OF_DATE DATE ,CREATE_DATE DATE default CURRENT_TIMESTAMP ,UPDATE_DATE DATE ,FINANCE_USER_APPROVE VARCHAR(250)  ,FINANCE_APPROVE_DATE DATE ,SALE_USER_APPROVE VARCHAR(250)  ,SALE_APPROVE_DATE DATE ,SALE_SAP_CODE VARCHAR(10)  ,ORG_CODE VARCHAR(10)  ,SERVICE_AMOUNT NUMBER(19,0)  ,REPORT_VALUE DECIMAL(20,2)  ,primary key(REPORT_ID))");
                                    }
                                }
                java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement("SELECT COUNT(1) FROM " + tableName_tDBOutput_1 + " WHERE REPORT_ID = ?");
                resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
                String insert_tDBOutput_1 = "INSERT INTO " + tableName_tDBOutput_1 + " (REPORT_ID,REPORT_MONTH_ID,SAA_CODE,CA_CODE,REPORT_TYPE,CALCULATED_COMMISSION_AMOUNT,APPROVED_COMMISSION_AMOUNT,STATUS,REMARK,USER_STATUS,USER_REMARK,REVISION,AS_OF_DATE,CREATE_DATE,UPDATE_DATE,FINANCE_USER_APPROVE,FINANCE_APPROVE_DATE,SALE_USER_APPROVE,SALE_APPROVE_DATE,SALE_SAP_CODE,ORG_CODE,SERVICE_AMOUNT,REPORT_VALUE) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";    
                java.sql.PreparedStatement pstmtInsert_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
                resourceMap.put("pstmtInsert_tDBOutput_1", pstmtInsert_tDBOutput_1);
                String update_tDBOutput_1 = "UPDATE " + tableName_tDBOutput_1 + " SET REPORT_MONTH_ID = ?,SAA_CODE = ?,CA_CODE = ?,REPORT_TYPE = ?,CALCULATED_COMMISSION_AMOUNT = ?,APPROVED_COMMISSION_AMOUNT = ?,STATUS = ?,REMARK = ?,USER_STATUS = ?,USER_REMARK = ?,REVISION = ?,AS_OF_DATE = ?,CREATE_DATE = ?,UPDATE_DATE = ?,FINANCE_USER_APPROVE = ?,FINANCE_APPROVE_DATE = ?,SALE_USER_APPROVE = ?,SALE_APPROVE_DATE = ?,SALE_SAP_CODE = ?,ORG_CODE = ?,SERVICE_AMOUNT = ?,REPORT_VALUE = ? WHERE REPORT_ID = ?";
                java.sql.PreparedStatement pstmtUpdate_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(update_tDBOutput_1);
                resourceMap.put("pstmtUpdate_tDBOutput_1", pstmtUpdate_tDBOutput_1);





 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_1 = java.util.Calendar.getInstance();
		    calendar_tDBInput_1.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_1 = calendar_tDBInput_1.getTime();
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "com.mysql.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = "pms_app";
				
				 
	final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:5O7F5t32xKz/KqwDU8LVZwoEKUO9XOkvhR+iBfoNTEyM4Ea8d2RXyA5q");
				
				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
				
				String url_tDBInput_1 = "jdbc:mysql://" + "10.44.49.9" + ":" + "3306" + "/" + "CAT_PM" + "?" + "noDatetimeStringSync=true";
				
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1,dbUser_tDBInput_1,dbPwd_tDBInput_1);
		        
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT \n  `COMMISSION_REPORT`.`REPORT_ID`, \n  `COMMISSION_REPORT`.`REPORT_MONTH_ID`, \n  `COMMISSION_REPORT`.`SAA_CODE`,"
+" \n  `COMMISSION_REPORT`.`CA_CODE`, \n  `COMMISSION_REPORT`.`REPORT_TYPE`, \n  `COMMISSION_REPORT`.`CALCULATED_COMMISSION_A"
+"MOUNT`, \n  `COMMISSION_REPORT`.`APPROVED_COMMISSION_AMOUNT`, \n  `COMMISSION_REPORT`.`STATUS`, \n  `COMMISSION_REPORT`.`RE"
+"MARK`, \n  `COMMISSION_REPORT`.`USER_STATUS`, \n  `COMMISSION_REPORT`.`USER_REMARK`, \n  `COMMISSION_REPORT`.`REVISION`, \n "
+" `COMMISSION_REPORT`.`AS_OF_DATE`, \n  `COMMISSION_REPORT`.`CREATE_DATE`, \n  `COMMISSION_REPORT`.`UPDATE_DATE`, \n  `COMMI"
+"SSION_REPORT`.`FINANCE_USER_APPROVE`, \n  `COMMISSION_REPORT`.`FINANCE_APPROVE_DATE`, \n  `COMMISSION_REPORT`.`SALE_USER_A"
+"PPROVE`, \n  `COMMISSION_REPORT`.`SALE_APPROVE_DATE`, \n  `COMMISSION_REPORT`.`SALE_SAP_CODE`, \n  `COMMISSION_REPORT`.`ORG"
+"_CODE`, \n  `COMMISSION_REPORT`.`SERVICE_AMOUNT`, \n  `COMMISSION_REPORT`.`REPORT_VALUE`\nFROM `COMMISSION_REPORT`";
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row1.REPORT_ID = 0;
							} else {
		                          
            row1.REPORT_ID = rs_tDBInput_1.getInt(1);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row1.REPORT_MONTH_ID = null;
							} else {
										
				if(rs_tDBInput_1.getString(2) != null) {
					String dateString_tDBInput_1 = rs_tDBInput_1.getString(2);
					if (!("0000-00-00").equals(dateString_tDBInput_1) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
						row1.REPORT_MONTH_ID = rs_tDBInput_1.getTimestamp(2);
					} else {
						row1.REPORT_MONTH_ID = (java.util.Date) year0_tDBInput_1.clone();
					}
				} else {
					row1.REPORT_MONTH_ID =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row1.SAA_CODE = null;
							} else {
	                         		
        	row1.SAA_CODE = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row1.CA_CODE = null;
							} else {
	                         		
        	row1.CA_CODE = routines.system.JDBCUtil.getString(rs_tDBInput_1, 4, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								row1.REPORT_TYPE = null;
							} else {
	                         		
        	row1.REPORT_TYPE = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								row1.CALCULATED_COMMISSION_AMOUNT = null;
							} else {
		                          
            row1.CALCULATED_COMMISSION_AMOUNT = rs_tDBInput_1.getBigDecimal(6);
            if(rs_tDBInput_1.wasNull()){
                    row1.CALCULATED_COMMISSION_AMOUNT = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								row1.APPROVED_COMMISSION_AMOUNT = null;
							} else {
		                          
            row1.APPROVED_COMMISSION_AMOUNT = rs_tDBInput_1.getBigDecimal(7);
            if(rs_tDBInput_1.wasNull()){
                    row1.APPROVED_COMMISSION_AMOUNT = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								row1.STATUS = null;
							} else {
	                         		
        	row1.STATUS = routines.system.JDBCUtil.getString(rs_tDBInput_1, 8, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 9) {
								row1.REMARK = null;
							} else {
	                         		
        	row1.REMARK = routines.system.JDBCUtil.getString(rs_tDBInput_1, 9, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 10) {
								row1.USER_STATUS = null;
							} else {
	                         		
        	row1.USER_STATUS = routines.system.JDBCUtil.getString(rs_tDBInput_1, 10, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 11) {
								row1.USER_REMARK = null;
							} else {
	                         		
        	row1.USER_REMARK = routines.system.JDBCUtil.getString(rs_tDBInput_1, 11, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 12) {
								row1.REVISION = 0;
							} else {
		                          
            row1.REVISION = rs_tDBInput_1.getShort(12);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 13) {
								row1.AS_OF_DATE = null;
							} else {
										
				if(rs_tDBInput_1.getString(13) != null) {
					String dateString_tDBInput_1 = rs_tDBInput_1.getString(13);
					if (!("0000-00-00").equals(dateString_tDBInput_1) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
						row1.AS_OF_DATE = rs_tDBInput_1.getTimestamp(13);
					} else {
						row1.AS_OF_DATE = (java.util.Date) year0_tDBInput_1.clone();
					}
				} else {
					row1.AS_OF_DATE =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_1 < 14) {
								row1.CREATE_DATE = null;
							} else {
										
				if(rs_tDBInput_1.getString(14) != null) {
					String dateString_tDBInput_1 = rs_tDBInput_1.getString(14);
					if (!("0000-00-00").equals(dateString_tDBInput_1) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
						row1.CREATE_DATE = rs_tDBInput_1.getTimestamp(14);
					} else {
						row1.CREATE_DATE = (java.util.Date) year0_tDBInput_1.clone();
					}
				} else {
					row1.CREATE_DATE =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_1 < 15) {
								row1.UPDATE_DATE = null;
							} else {
										
				if(rs_tDBInput_1.getString(15) != null) {
					String dateString_tDBInput_1 = rs_tDBInput_1.getString(15);
					if (!("0000-00-00").equals(dateString_tDBInput_1) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
						row1.UPDATE_DATE = rs_tDBInput_1.getTimestamp(15);
					} else {
						row1.UPDATE_DATE = (java.util.Date) year0_tDBInput_1.clone();
					}
				} else {
					row1.UPDATE_DATE =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_1 < 16) {
								row1.FINANCE_USER_APPROVE = null;
							} else {
	                         		
        	row1.FINANCE_USER_APPROVE = routines.system.JDBCUtil.getString(rs_tDBInput_1, 16, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 17) {
								row1.FINANCE_APPROVE_DATE = null;
							} else {
										
				if(rs_tDBInput_1.getString(17) != null) {
					String dateString_tDBInput_1 = rs_tDBInput_1.getString(17);
					if (!("0000-00-00").equals(dateString_tDBInput_1) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
						row1.FINANCE_APPROVE_DATE = rs_tDBInput_1.getTimestamp(17);
					} else {
						row1.FINANCE_APPROVE_DATE = (java.util.Date) year0_tDBInput_1.clone();
					}
				} else {
					row1.FINANCE_APPROVE_DATE =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_1 < 18) {
								row1.SALE_USER_APPROVE = null;
							} else {
	                         		
        	row1.SALE_USER_APPROVE = routines.system.JDBCUtil.getString(rs_tDBInput_1, 18, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 19) {
								row1.SALE_APPROVE_DATE = null;
							} else {
										
				if(rs_tDBInput_1.getString(19) != null) {
					String dateString_tDBInput_1 = rs_tDBInput_1.getString(19);
					if (!("0000-00-00").equals(dateString_tDBInput_1) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
						row1.SALE_APPROVE_DATE = rs_tDBInput_1.getTimestamp(19);
					} else {
						row1.SALE_APPROVE_DATE = (java.util.Date) year0_tDBInput_1.clone();
					}
				} else {
					row1.SALE_APPROVE_DATE =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_1 < 20) {
								row1.SALE_SAP_CODE = null;
							} else {
	                         		
        	row1.SALE_SAP_CODE = routines.system.JDBCUtil.getString(rs_tDBInput_1, 20, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 21) {
								row1.ORG_CODE = null;
							} else {
	                         		
        	row1.ORG_CODE = routines.system.JDBCUtil.getString(rs_tDBInput_1, 21, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 22) {
								row1.SERVICE_AMOUNT = null;
							} else {
		                          
            row1.SERVICE_AMOUNT = rs_tDBInput_1.getLong(22);
            if(rs_tDBInput_1.wasNull()){
                    row1.SERVICE_AMOUNT = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 23) {
								row1.REPORT_VALUE = null;
							} else {
		                          
            row1.REPORT_VALUE = rs_tDBInput_1.getBigDecimal(23);
            if(rs_tDBInput_1.wasNull()){
                    row1.REPORT_VALUE = null;
            }
		                    }
					

 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row1");
					}
					



        whetherReject_tDBOutput_1 = false;
                    pstmt_tDBOutput_1.setInt(1, row1.REPORT_ID);

            int checkCount_tDBOutput_1 = -1;
            try (java.sql.ResultSet rs_tDBOutput_1 = pstmt_tDBOutput_1.executeQuery()) {
                while(rs_tDBOutput_1.next()) {
                    checkCount_tDBOutput_1 = rs_tDBOutput_1.getInt(1);
                }
            }
            if(checkCount_tDBOutput_1 > 0) {
                        if(row1.REPORT_MONTH_ID != null) {
pstmtUpdate_tDBOutput_1.setObject(1, new java.sql.Timestamp(row1.REPORT_MONTH_ID.getTime()),java.sql.Types.DATE);
} else {
pstmtUpdate_tDBOutput_1.setNull(1, java.sql.Types.DATE);
}

                        if(row1.SAA_CODE == null) {
pstmtUpdate_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(2, row1.SAA_CODE);
}

                        if(row1.CA_CODE == null) {
pstmtUpdate_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(3, row1.CA_CODE);
}

                        if(row1.REPORT_TYPE == null) {
pstmtUpdate_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(4, row1.REPORT_TYPE);
}

                        pstmtUpdate_tDBOutput_1.setBigDecimal(5, row1.CALCULATED_COMMISSION_AMOUNT);

                        pstmtUpdate_tDBOutput_1.setBigDecimal(6, row1.APPROVED_COMMISSION_AMOUNT);

                        if(row1.STATUS == null) {
pstmtUpdate_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(7, row1.STATUS);
}

                        if(row1.REMARK == null) {
pstmtUpdate_tDBOutput_1.setNull(8, java.sql.Types.CLOB);
} else {pstmtUpdate_tDBOutput_1.setCharacterStream(8, new java.io.StringReader(row1.REMARK), row1.REMARK.length());
}

                        if(row1.USER_STATUS == null) {
pstmtUpdate_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(9, row1.USER_STATUS);
}

                        if(row1.USER_REMARK == null) {
pstmtUpdate_tDBOutput_1.setNull(10, java.sql.Types.CLOB);
} else {pstmtUpdate_tDBOutput_1.setCharacterStream(10, new java.io.StringReader(row1.USER_REMARK), row1.USER_REMARK.length());
}

                        pstmtUpdate_tDBOutput_1.setShort(11, row1.REVISION);

                        if(row1.AS_OF_DATE != null) {
pstmtUpdate_tDBOutput_1.setObject(12, new java.sql.Timestamp(row1.AS_OF_DATE.getTime()),java.sql.Types.DATE);
} else {
pstmtUpdate_tDBOutput_1.setNull(12, java.sql.Types.DATE);
}

                        if(row1.CREATE_DATE != null) {
pstmtUpdate_tDBOutput_1.setObject(13, new java.sql.Timestamp(row1.CREATE_DATE.getTime()),java.sql.Types.DATE);
} else {
pstmtUpdate_tDBOutput_1.setNull(13, java.sql.Types.DATE);
}

                        if(row1.UPDATE_DATE != null) {
pstmtUpdate_tDBOutput_1.setObject(14, new java.sql.Timestamp(row1.UPDATE_DATE.getTime()),java.sql.Types.DATE);
} else {
pstmtUpdate_tDBOutput_1.setNull(14, java.sql.Types.DATE);
}

                        if(row1.FINANCE_USER_APPROVE == null) {
pstmtUpdate_tDBOutput_1.setNull(15, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(15, row1.FINANCE_USER_APPROVE);
}

                        if(row1.FINANCE_APPROVE_DATE != null) {
pstmtUpdate_tDBOutput_1.setObject(16, new java.sql.Timestamp(row1.FINANCE_APPROVE_DATE.getTime()),java.sql.Types.DATE);
} else {
pstmtUpdate_tDBOutput_1.setNull(16, java.sql.Types.DATE);
}

                        if(row1.SALE_USER_APPROVE == null) {
pstmtUpdate_tDBOutput_1.setNull(17, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(17, row1.SALE_USER_APPROVE);
}

                        if(row1.SALE_APPROVE_DATE != null) {
pstmtUpdate_tDBOutput_1.setObject(18, new java.sql.Timestamp(row1.SALE_APPROVE_DATE.getTime()),java.sql.Types.DATE);
} else {
pstmtUpdate_tDBOutput_1.setNull(18, java.sql.Types.DATE);
}

                        if(row1.SALE_SAP_CODE == null) {
pstmtUpdate_tDBOutput_1.setNull(19, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(19, row1.SALE_SAP_CODE);
}

                        if(row1.ORG_CODE == null) {
pstmtUpdate_tDBOutput_1.setNull(20, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(20, row1.ORG_CODE);
}

                        if(row1.SERVICE_AMOUNT == null) {
pstmtUpdate_tDBOutput_1.setNull(21, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setLong(21, row1.SERVICE_AMOUNT);
}

                        pstmtUpdate_tDBOutput_1.setBigDecimal(22, row1.REPORT_VALUE);

                        pstmtUpdate_tDBOutput_1.setInt(23 + count_tDBOutput_1, row1.REPORT_ID);

                try {
                    updatedCount_tDBOutput_1 = updatedCount_tDBOutput_1 + pstmtUpdate_tDBOutput_1.executeUpdate();
                    nb_line_tDBOutput_1++;
                } catch(java.lang.Exception e_tDBOutput_1) {
                    whetherReject_tDBOutput_1 = true;
                        nb_line_tDBOutput_1++;
                            System.err.print(e_tDBOutput_1.getMessage());
                }
            } else {
                        pstmtInsert_tDBOutput_1.setInt(1, row1.REPORT_ID);

                        if(row1.REPORT_MONTH_ID != null) {
pstmtInsert_tDBOutput_1.setObject(2, new java.sql.Timestamp(row1.REPORT_MONTH_ID.getTime()),java.sql.Types.DATE);
} else {
pstmtInsert_tDBOutput_1.setNull(2, java.sql.Types.DATE);
}

                        if(row1.SAA_CODE == null) {
pstmtInsert_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(3, row1.SAA_CODE);
}

                        if(row1.CA_CODE == null) {
pstmtInsert_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(4, row1.CA_CODE);
}

                        if(row1.REPORT_TYPE == null) {
pstmtInsert_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(5, row1.REPORT_TYPE);
}

                        pstmtInsert_tDBOutput_1.setBigDecimal(6, row1.CALCULATED_COMMISSION_AMOUNT);

                        pstmtInsert_tDBOutput_1.setBigDecimal(7, row1.APPROVED_COMMISSION_AMOUNT);

                        if(row1.STATUS == null) {
pstmtInsert_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(8, row1.STATUS);
}

                        if(row1.REMARK == null) {
pstmtInsert_tDBOutput_1.setNull(9, java.sql.Types.CLOB);
} else {pstmtInsert_tDBOutput_1.setCharacterStream(9, new java.io.StringReader(row1.REMARK), row1.REMARK.length());
}

                        if(row1.USER_STATUS == null) {
pstmtInsert_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(10, row1.USER_STATUS);
}

                        if(row1.USER_REMARK == null) {
pstmtInsert_tDBOutput_1.setNull(11, java.sql.Types.CLOB);
} else {pstmtInsert_tDBOutput_1.setCharacterStream(11, new java.io.StringReader(row1.USER_REMARK), row1.USER_REMARK.length());
}

                        pstmtInsert_tDBOutput_1.setShort(12, row1.REVISION);

                        if(row1.AS_OF_DATE != null) {
pstmtInsert_tDBOutput_1.setObject(13, new java.sql.Timestamp(row1.AS_OF_DATE.getTime()),java.sql.Types.DATE);
} else {
pstmtInsert_tDBOutput_1.setNull(13, java.sql.Types.DATE);
}

                        if(row1.CREATE_DATE != null) {
pstmtInsert_tDBOutput_1.setObject(14, new java.sql.Timestamp(row1.CREATE_DATE.getTime()),java.sql.Types.DATE);
} else {
pstmtInsert_tDBOutput_1.setNull(14, java.sql.Types.DATE);
}

                        if(row1.UPDATE_DATE != null) {
pstmtInsert_tDBOutput_1.setObject(15, new java.sql.Timestamp(row1.UPDATE_DATE.getTime()),java.sql.Types.DATE);
} else {
pstmtInsert_tDBOutput_1.setNull(15, java.sql.Types.DATE);
}

                        if(row1.FINANCE_USER_APPROVE == null) {
pstmtInsert_tDBOutput_1.setNull(16, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(16, row1.FINANCE_USER_APPROVE);
}

                        if(row1.FINANCE_APPROVE_DATE != null) {
pstmtInsert_tDBOutput_1.setObject(17, new java.sql.Timestamp(row1.FINANCE_APPROVE_DATE.getTime()),java.sql.Types.DATE);
} else {
pstmtInsert_tDBOutput_1.setNull(17, java.sql.Types.DATE);
}

                        if(row1.SALE_USER_APPROVE == null) {
pstmtInsert_tDBOutput_1.setNull(18, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(18, row1.SALE_USER_APPROVE);
}

                        if(row1.SALE_APPROVE_DATE != null) {
pstmtInsert_tDBOutput_1.setObject(19, new java.sql.Timestamp(row1.SALE_APPROVE_DATE.getTime()),java.sql.Types.DATE);
} else {
pstmtInsert_tDBOutput_1.setNull(19, java.sql.Types.DATE);
}

                        if(row1.SALE_SAP_CODE == null) {
pstmtInsert_tDBOutput_1.setNull(20, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(20, row1.SALE_SAP_CODE);
}

                        if(row1.ORG_CODE == null) {
pstmtInsert_tDBOutput_1.setNull(21, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(21, row1.ORG_CODE);
}

                        if(row1.SERVICE_AMOUNT == null) {
pstmtInsert_tDBOutput_1.setNull(22, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setLong(22, row1.SERVICE_AMOUNT);
}

                        pstmtInsert_tDBOutput_1.setBigDecimal(23, row1.REPORT_VALUE);

                try {
                    insertedCount_tDBOutput_1 = insertedCount_tDBOutput_1 + pstmtInsert_tDBOutput_1.executeUpdate();
                    nb_line_tDBOutput_1++;
                } catch(java.lang.Exception e_tDBOutput_1) {
                    whetherReject_tDBOutput_1 = true;
                        nb_line_tDBOutput_1++;
                            System.err.print(e_tDBOutput_1.getMessage());
                }
            }
                commitCounter_tDBOutput_1++;
                if(commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {

                    conn_tDBOutput_1.commit();
                    commitCounter_tDBOutput_1=0;
                }

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
		if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
			
			conn_tDBInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
		
}

		   globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
		


 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	
	



	
        if(pstmtUpdate_tDBOutput_1 != null){
            pstmtUpdate_tDBOutput_1.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_1");
        }
        if(pstmtInsert_tDBOutput_1 != null){
            pstmtInsert_tDBOutput_1.close();
            resourceMap.remove("pstmtInsert_tDBOutput_1");
        }
        if(pstmt_tDBOutput_1 != null) {
            pstmt_tDBOutput_1.close();
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);
		if(commitCounter_tDBOutput_1 > 0) {
			
		    conn_tDBOutput_1.commit();
			
		}
		
		
		conn_tDBOutput_1 .close();
		
		resourceMap.put("finish_tDBOutput_1", true);
   	


	
	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    
	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_1 = null;
                if ((pstmtUpdateToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_1")) != null) {
                    pstmtUpdateToClose_tDBOutput_1.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_1 = null;
                if ((pstmtInsertToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_1")) != null) {
                    pstmtInsertToClose_tDBOutput_1.close();
                }
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_1") == null){
            java.sql.Connection ctn_tDBOutput_1 = null;
            if((ctn_tDBOutput_1 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_1")) != null){
                try {
                    ctn_tDBOutput_1.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_1) {
                    String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :" + sqlEx_tDBOutput_1.getMessage();
                    System.err.println(errorMessage_tDBOutput_1);
                }
            }
        }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final loadCommissionReport loadCommissionReportClass = new loadCommissionReport();

        int exitCode = loadCommissionReportClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = loadCommissionReport.class.getClassLoader().getResourceAsStream("commission_report/loadcommissionreport_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = loadCommissionReport.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBInput_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_1) {
globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

e_tDBInput_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : loadCommissionReport");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     71465 characters generated by Talend Open Studio for Data Integration 
 *     on the March 30, 2021 2:14:35 PM ICT
 ************************************************************************************************/