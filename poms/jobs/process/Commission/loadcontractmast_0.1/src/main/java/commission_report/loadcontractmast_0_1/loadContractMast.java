// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package commission_report.loadcontractmast_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: loadContractMast Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status PROD
 */
public class loadContractMast implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "loadContractMast";
	private final String projectName = "COMMISSION_REPORT";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					loadContractMast.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(loadContractMast.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class toOracleStruct implements routines.system.IPersistableRow<toOracleStruct> {
		final static byte[] commonByteArrayLock_COMMISSION_REPORT_loadContractMast = new byte[0];
		static byte[] commonByteArray_COMMISSION_REPORT_loadContractMast = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String CONTRACT_ID;

		public String getCONTRACT_ID() {
			return this.CONTRACT_ID;
		}

		public java.util.Date CONTRACT_DATE;

		public java.util.Date getCONTRACT_DATE() {
			return this.CONTRACT_DATE;
		}

		public String PARTNER_ID;

		public String getPARTNER_ID() {
			return this.PARTNER_ID;
		}

		public String REF_CONTRACT;

		public String getREF_CONTRACT() {
			return this.REF_CONTRACT;
		}

		public String PROJECT_NAME;

		public String getPROJECT_NAME() {
			return this.PROJECT_NAME;
		}

		public String SERVICE_CATE;

		public String getSERVICE_CATE() {
			return this.SERVICE_CATE;
		}

		public String SAA_REGION;

		public String getSAA_REGION() {
			return this.SAA_REGION;
		}

		public String SAA_PROVINCE;

		public String getSAA_PROVINCE() {
			return this.SAA_PROVINCE;
		}

		public String SAA_SALES_TEAM;

		public String getSAA_SALES_TEAM() {
			return this.SAA_SALES_TEAM;
		}

		public String SAA_SALES_REP;

		public String getSAA_SALES_REP() {
			return this.SAA_SALES_REP;
		}

		public String REF_SAA;

		public String getREF_SAA() {
			return this.REF_SAA;
		}

		public String REF_DOC;

		public String getREF_DOC() {
			return this.REF_DOC;
		}

		public java.util.Date EFF_DATE;

		public java.util.Date getEFF_DATE() {
			return this.EFF_DATE;
		}

		public java.util.Date EXPR_DATE;

		public java.util.Date getEXPR_DATE() {
			return this.EXPR_DATE;
		}

		public String COMMISSION_ID;

		public String getCOMMISSION_ID() {
			return this.COMMISSION_ID;
		}

		public Short ADDR_SEQ;

		public Short getADDR_SEQ() {
			return this.ADDR_SEQ;
		}

		public Short CONTACT_SEQ;

		public Short getCONTACT_SEQ() {
			return this.CONTACT_SEQ;
		}

		public String AUTH_BY;

		public String getAUTH_BY() {
			return this.AUTH_BY;
		}

		public java.util.Date AUTH_DATE;

		public java.util.Date getAUTH_DATE() {
			return this.AUTH_DATE;
		}

		public String STATUS;

		public String getSTATUS() {
			return this.STATUS;
		}

		public String REASON_CODE;

		public String getREASON_CODE() {
			return this.REASON_CODE;
		}

		public String REASON_NOTE;

		public String getREASON_NOTE() {
			return this.REASON_NOTE;
		}

		public String CREATE_BY;

		public String getCREATE_BY() {
			return this.CREATE_BY;
		}

		public java.util.Date CREATE_DATE;

		public java.util.Date getCREATE_DATE() {
			return this.CREATE_DATE;
		}

		public String LAST_UPDATE_BY;

		public String getLAST_UPDATE_BY() {
			return this.LAST_UPDATE_BY;
		}

		public java.util.Date LAST_UPDATE_DATE;

		public java.util.Date getLAST_UPDATE_DATE() {
			return this.LAST_UPDATE_DATE;
		}

		public String IS_SKIPPED_BY_FINANCE;

		public String getIS_SKIPPED_BY_FINANCE() {
			return this.IS_SKIPPED_BY_FINANCE;
		}

		public String MY_COMMISSION_ID;

		public String getMY_COMMISSION_ID() {
			return this.MY_COMMISSION_ID;
		}

		public Byte IS_PROTOTYPE;

		public Byte getIS_PROTOTYPE() {
			return this.IS_PROTOTYPE;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.CONTRACT_ID == null) ? 0 : this.CONTRACT_ID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final toOracleStruct other = (toOracleStruct) obj;

			if (this.CONTRACT_ID == null) {
				if (other.CONTRACT_ID != null)
					return false;

			} else if (!this.CONTRACT_ID.equals(other.CONTRACT_ID))

				return false;

			return true;
		}

		public void copyDataTo(toOracleStruct other) {

			other.CONTRACT_ID = this.CONTRACT_ID;
			other.CONTRACT_DATE = this.CONTRACT_DATE;
			other.PARTNER_ID = this.PARTNER_ID;
			other.REF_CONTRACT = this.REF_CONTRACT;
			other.PROJECT_NAME = this.PROJECT_NAME;
			other.SERVICE_CATE = this.SERVICE_CATE;
			other.SAA_REGION = this.SAA_REGION;
			other.SAA_PROVINCE = this.SAA_PROVINCE;
			other.SAA_SALES_TEAM = this.SAA_SALES_TEAM;
			other.SAA_SALES_REP = this.SAA_SALES_REP;
			other.REF_SAA = this.REF_SAA;
			other.REF_DOC = this.REF_DOC;
			other.EFF_DATE = this.EFF_DATE;
			other.EXPR_DATE = this.EXPR_DATE;
			other.COMMISSION_ID = this.COMMISSION_ID;
			other.ADDR_SEQ = this.ADDR_SEQ;
			other.CONTACT_SEQ = this.CONTACT_SEQ;
			other.AUTH_BY = this.AUTH_BY;
			other.AUTH_DATE = this.AUTH_DATE;
			other.STATUS = this.STATUS;
			other.REASON_CODE = this.REASON_CODE;
			other.REASON_NOTE = this.REASON_NOTE;
			other.CREATE_BY = this.CREATE_BY;
			other.CREATE_DATE = this.CREATE_DATE;
			other.LAST_UPDATE_BY = this.LAST_UPDATE_BY;
			other.LAST_UPDATE_DATE = this.LAST_UPDATE_DATE;
			other.IS_SKIPPED_BY_FINANCE = this.IS_SKIPPED_BY_FINANCE;
			other.MY_COMMISSION_ID = this.MY_COMMISSION_ID;
			other.IS_PROTOTYPE = this.IS_PROTOTYPE;

		}

		public void copyKeysDataTo(toOracleStruct other) {

			other.CONTRACT_ID = this.CONTRACT_ID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_COMMISSION_REPORT_loadContractMast.length) {
					if (length < 1024 && commonByteArray_COMMISSION_REPORT_loadContractMast.length == 0) {
						commonByteArray_COMMISSION_REPORT_loadContractMast = new byte[1024];
					} else {
						commonByteArray_COMMISSION_REPORT_loadContractMast = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_COMMISSION_REPORT_loadContractMast, 0, length);
				strReturn = new String(commonByteArray_COMMISSION_REPORT_loadContractMast, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_COMMISSION_REPORT_loadContractMast) {

				try {

					int length = 0;

					this.CONTRACT_ID = readString(dis);

					this.CONTRACT_DATE = readDate(dis);

					this.PARTNER_ID = readString(dis);

					this.REF_CONTRACT = readString(dis);

					this.PROJECT_NAME = readString(dis);

					this.SERVICE_CATE = readString(dis);

					this.SAA_REGION = readString(dis);

					this.SAA_PROVINCE = readString(dis);

					this.SAA_SALES_TEAM = readString(dis);

					this.SAA_SALES_REP = readString(dis);

					this.REF_SAA = readString(dis);

					this.REF_DOC = readString(dis);

					this.EFF_DATE = readDate(dis);

					this.EXPR_DATE = readDate(dis);

					this.COMMISSION_ID = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ADDR_SEQ = null;
					} else {
						this.ADDR_SEQ = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.CONTACT_SEQ = null;
					} else {
						this.CONTACT_SEQ = dis.readShort();
					}

					this.AUTH_BY = readString(dis);

					this.AUTH_DATE = readDate(dis);

					this.STATUS = readString(dis);

					this.REASON_CODE = readString(dis);

					this.REASON_NOTE = readString(dis);

					this.CREATE_BY = readString(dis);

					this.CREATE_DATE = readDate(dis);

					this.LAST_UPDATE_BY = readString(dis);

					this.LAST_UPDATE_DATE = readDate(dis);

					this.IS_SKIPPED_BY_FINANCE = readString(dis);

					this.MY_COMMISSION_ID = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IS_PROTOTYPE = null;
					} else {
						this.IS_PROTOTYPE = dis.readByte();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CONTRACT_ID, dos);

				// java.util.Date

				writeDate(this.CONTRACT_DATE, dos);

				// String

				writeString(this.PARTNER_ID, dos);

				// String

				writeString(this.REF_CONTRACT, dos);

				// String

				writeString(this.PROJECT_NAME, dos);

				// String

				writeString(this.SERVICE_CATE, dos);

				// String

				writeString(this.SAA_REGION, dos);

				// String

				writeString(this.SAA_PROVINCE, dos);

				// String

				writeString(this.SAA_SALES_TEAM, dos);

				// String

				writeString(this.SAA_SALES_REP, dos);

				// String

				writeString(this.REF_SAA, dos);

				// String

				writeString(this.REF_DOC, dos);

				// java.util.Date

				writeDate(this.EFF_DATE, dos);

				// java.util.Date

				writeDate(this.EXPR_DATE, dos);

				// String

				writeString(this.COMMISSION_ID, dos);

				// Short

				if (this.ADDR_SEQ == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.ADDR_SEQ);
				}

				// Short

				if (this.CONTACT_SEQ == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.CONTACT_SEQ);
				}

				// String

				writeString(this.AUTH_BY, dos);

				// java.util.Date

				writeDate(this.AUTH_DATE, dos);

				// String

				writeString(this.STATUS, dos);

				// String

				writeString(this.REASON_CODE, dos);

				// String

				writeString(this.REASON_NOTE, dos);

				// String

				writeString(this.CREATE_BY, dos);

				// java.util.Date

				writeDate(this.CREATE_DATE, dos);

				// String

				writeString(this.LAST_UPDATE_BY, dos);

				// java.util.Date

				writeDate(this.LAST_UPDATE_DATE, dos);

				// String

				writeString(this.IS_SKIPPED_BY_FINANCE, dos);

				// String

				writeString(this.MY_COMMISSION_ID, dos);

				// Byte

				if (this.IS_PROTOTYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeByte(this.IS_PROTOTYPE);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CONTRACT_ID=" + CONTRACT_ID);
			sb.append(",CONTRACT_DATE=" + String.valueOf(CONTRACT_DATE));
			sb.append(",PARTNER_ID=" + PARTNER_ID);
			sb.append(",REF_CONTRACT=" + REF_CONTRACT);
			sb.append(",PROJECT_NAME=" + PROJECT_NAME);
			sb.append(",SERVICE_CATE=" + SERVICE_CATE);
			sb.append(",SAA_REGION=" + SAA_REGION);
			sb.append(",SAA_PROVINCE=" + SAA_PROVINCE);
			sb.append(",SAA_SALES_TEAM=" + SAA_SALES_TEAM);
			sb.append(",SAA_SALES_REP=" + SAA_SALES_REP);
			sb.append(",REF_SAA=" + REF_SAA);
			sb.append(",REF_DOC=" + REF_DOC);
			sb.append(",EFF_DATE=" + String.valueOf(EFF_DATE));
			sb.append(",EXPR_DATE=" + String.valueOf(EXPR_DATE));
			sb.append(",COMMISSION_ID=" + COMMISSION_ID);
			sb.append(",ADDR_SEQ=" + String.valueOf(ADDR_SEQ));
			sb.append(",CONTACT_SEQ=" + String.valueOf(CONTACT_SEQ));
			sb.append(",AUTH_BY=" + AUTH_BY);
			sb.append(",AUTH_DATE=" + String.valueOf(AUTH_DATE));
			sb.append(",STATUS=" + STATUS);
			sb.append(",REASON_CODE=" + REASON_CODE);
			sb.append(",REASON_NOTE=" + REASON_NOTE);
			sb.append(",CREATE_BY=" + CREATE_BY);
			sb.append(",CREATE_DATE=" + String.valueOf(CREATE_DATE));
			sb.append(",LAST_UPDATE_BY=" + LAST_UPDATE_BY);
			sb.append(",LAST_UPDATE_DATE=" + String.valueOf(LAST_UPDATE_DATE));
			sb.append(",IS_SKIPPED_BY_FINANCE=" + IS_SKIPPED_BY_FINANCE);
			sb.append(",MY_COMMISSION_ID=" + MY_COMMISSION_ID);
			sb.append(",IS_PROTOTYPE=" + String.valueOf(IS_PROTOTYPE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(toOracleStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CONTRACT_ID, other.CONTRACT_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_COMMISSION_REPORT_loadContractMast = new byte[0];
		static byte[] commonByteArray_COMMISSION_REPORT_loadContractMast = new byte[0];

		public String CONTRACT_ID;

		public String getCONTRACT_ID() {
			return this.CONTRACT_ID;
		}

		public java.util.Date CONTRACT_DATE;

		public java.util.Date getCONTRACT_DATE() {
			return this.CONTRACT_DATE;
		}

		public String PARTNER_ID;

		public String getPARTNER_ID() {
			return this.PARTNER_ID;
		}

		public String REF_CONTRACT;

		public String getREF_CONTRACT() {
			return this.REF_CONTRACT;
		}

		public String PROJECT_NAME;

		public String getPROJECT_NAME() {
			return this.PROJECT_NAME;
		}

		public String SERVICE_CATE;

		public String getSERVICE_CATE() {
			return this.SERVICE_CATE;
		}

		public String SAA_REGION;

		public String getSAA_REGION() {
			return this.SAA_REGION;
		}

		public String SAA_PROVINCE;

		public String getSAA_PROVINCE() {
			return this.SAA_PROVINCE;
		}

		public String SAA_SALES_TEAM;

		public String getSAA_SALES_TEAM() {
			return this.SAA_SALES_TEAM;
		}

		public String SAA_SALES_REP;

		public String getSAA_SALES_REP() {
			return this.SAA_SALES_REP;
		}

		public String REF_SAA;

		public String getREF_SAA() {
			return this.REF_SAA;
		}

		public String REF_DOC;

		public String getREF_DOC() {
			return this.REF_DOC;
		}

		public java.util.Date EFF_DATE;

		public java.util.Date getEFF_DATE() {
			return this.EFF_DATE;
		}

		public java.util.Date EXPR_DATE;

		public java.util.Date getEXPR_DATE() {
			return this.EXPR_DATE;
		}

		public String COMMISSION_ID;

		public String getCOMMISSION_ID() {
			return this.COMMISSION_ID;
		}

		public Short ADDR_SEQ;

		public Short getADDR_SEQ() {
			return this.ADDR_SEQ;
		}

		public Short CONTACT_SEQ;

		public Short getCONTACT_SEQ() {
			return this.CONTACT_SEQ;
		}

		public String AUTH_BY;

		public String getAUTH_BY() {
			return this.AUTH_BY;
		}

		public java.util.Date AUTH_DATE;

		public java.util.Date getAUTH_DATE() {
			return this.AUTH_DATE;
		}

		public String STATUS;

		public String getSTATUS() {
			return this.STATUS;
		}

		public String REASON_CODE;

		public String getREASON_CODE() {
			return this.REASON_CODE;
		}

		public String REASON_NOTE;

		public String getREASON_NOTE() {
			return this.REASON_NOTE;
		}

		public String CREATE_BY;

		public String getCREATE_BY() {
			return this.CREATE_BY;
		}

		public java.util.Date CREATE_DATE;

		public java.util.Date getCREATE_DATE() {
			return this.CREATE_DATE;
		}

		public String LAST_UPDATE_BY;

		public String getLAST_UPDATE_BY() {
			return this.LAST_UPDATE_BY;
		}

		public java.util.Date LAST_UPDATE_DATE;

		public java.util.Date getLAST_UPDATE_DATE() {
			return this.LAST_UPDATE_DATE;
		}

		public String IS_SKIPPED_BY_FINANCE;

		public String getIS_SKIPPED_BY_FINANCE() {
			return this.IS_SKIPPED_BY_FINANCE;
		}

		public String MY_COMMISSION_ID;

		public String getMY_COMMISSION_ID() {
			return this.MY_COMMISSION_ID;
		}

		public Byte IS_PROTOTYPE;

		public Byte getIS_PROTOTYPE() {
			return this.IS_PROTOTYPE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_COMMISSION_REPORT_loadContractMast.length) {
					if (length < 1024 && commonByteArray_COMMISSION_REPORT_loadContractMast.length == 0) {
						commonByteArray_COMMISSION_REPORT_loadContractMast = new byte[1024];
					} else {
						commonByteArray_COMMISSION_REPORT_loadContractMast = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_COMMISSION_REPORT_loadContractMast, 0, length);
				strReturn = new String(commonByteArray_COMMISSION_REPORT_loadContractMast, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_COMMISSION_REPORT_loadContractMast) {

				try {

					int length = 0;

					this.CONTRACT_ID = readString(dis);

					this.CONTRACT_DATE = readDate(dis);

					this.PARTNER_ID = readString(dis);

					this.REF_CONTRACT = readString(dis);

					this.PROJECT_NAME = readString(dis);

					this.SERVICE_CATE = readString(dis);

					this.SAA_REGION = readString(dis);

					this.SAA_PROVINCE = readString(dis);

					this.SAA_SALES_TEAM = readString(dis);

					this.SAA_SALES_REP = readString(dis);

					this.REF_SAA = readString(dis);

					this.REF_DOC = readString(dis);

					this.EFF_DATE = readDate(dis);

					this.EXPR_DATE = readDate(dis);

					this.COMMISSION_ID = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ADDR_SEQ = null;
					} else {
						this.ADDR_SEQ = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.CONTACT_SEQ = null;
					} else {
						this.CONTACT_SEQ = dis.readShort();
					}

					this.AUTH_BY = readString(dis);

					this.AUTH_DATE = readDate(dis);

					this.STATUS = readString(dis);

					this.REASON_CODE = readString(dis);

					this.REASON_NOTE = readString(dis);

					this.CREATE_BY = readString(dis);

					this.CREATE_DATE = readDate(dis);

					this.LAST_UPDATE_BY = readString(dis);

					this.LAST_UPDATE_DATE = readDate(dis);

					this.IS_SKIPPED_BY_FINANCE = readString(dis);

					this.MY_COMMISSION_ID = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IS_PROTOTYPE = null;
					} else {
						this.IS_PROTOTYPE = dis.readByte();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CONTRACT_ID, dos);

				// java.util.Date

				writeDate(this.CONTRACT_DATE, dos);

				// String

				writeString(this.PARTNER_ID, dos);

				// String

				writeString(this.REF_CONTRACT, dos);

				// String

				writeString(this.PROJECT_NAME, dos);

				// String

				writeString(this.SERVICE_CATE, dos);

				// String

				writeString(this.SAA_REGION, dos);

				// String

				writeString(this.SAA_PROVINCE, dos);

				// String

				writeString(this.SAA_SALES_TEAM, dos);

				// String

				writeString(this.SAA_SALES_REP, dos);

				// String

				writeString(this.REF_SAA, dos);

				// String

				writeString(this.REF_DOC, dos);

				// java.util.Date

				writeDate(this.EFF_DATE, dos);

				// java.util.Date

				writeDate(this.EXPR_DATE, dos);

				// String

				writeString(this.COMMISSION_ID, dos);

				// Short

				if (this.ADDR_SEQ == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.ADDR_SEQ);
				}

				// Short

				if (this.CONTACT_SEQ == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.CONTACT_SEQ);
				}

				// String

				writeString(this.AUTH_BY, dos);

				// java.util.Date

				writeDate(this.AUTH_DATE, dos);

				// String

				writeString(this.STATUS, dos);

				// String

				writeString(this.REASON_CODE, dos);

				// String

				writeString(this.REASON_NOTE, dos);

				// String

				writeString(this.CREATE_BY, dos);

				// java.util.Date

				writeDate(this.CREATE_DATE, dos);

				// String

				writeString(this.LAST_UPDATE_BY, dos);

				// java.util.Date

				writeDate(this.LAST_UPDATE_DATE, dos);

				// String

				writeString(this.IS_SKIPPED_BY_FINANCE, dos);

				// String

				writeString(this.MY_COMMISSION_ID, dos);

				// Byte

				if (this.IS_PROTOTYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeByte(this.IS_PROTOTYPE);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CONTRACT_ID=" + CONTRACT_ID);
			sb.append(",CONTRACT_DATE=" + String.valueOf(CONTRACT_DATE));
			sb.append(",PARTNER_ID=" + PARTNER_ID);
			sb.append(",REF_CONTRACT=" + REF_CONTRACT);
			sb.append(",PROJECT_NAME=" + PROJECT_NAME);
			sb.append(",SERVICE_CATE=" + SERVICE_CATE);
			sb.append(",SAA_REGION=" + SAA_REGION);
			sb.append(",SAA_PROVINCE=" + SAA_PROVINCE);
			sb.append(",SAA_SALES_TEAM=" + SAA_SALES_TEAM);
			sb.append(",SAA_SALES_REP=" + SAA_SALES_REP);
			sb.append(",REF_SAA=" + REF_SAA);
			sb.append(",REF_DOC=" + REF_DOC);
			sb.append(",EFF_DATE=" + String.valueOf(EFF_DATE));
			sb.append(",EXPR_DATE=" + String.valueOf(EXPR_DATE));
			sb.append(",COMMISSION_ID=" + COMMISSION_ID);
			sb.append(",ADDR_SEQ=" + String.valueOf(ADDR_SEQ));
			sb.append(",CONTACT_SEQ=" + String.valueOf(CONTACT_SEQ));
			sb.append(",AUTH_BY=" + AUTH_BY);
			sb.append(",AUTH_DATE=" + String.valueOf(AUTH_DATE));
			sb.append(",STATUS=" + STATUS);
			sb.append(",REASON_CODE=" + REASON_CODE);
			sb.append(",REASON_NOTE=" + REASON_NOTE);
			sb.append(",CREATE_BY=" + CREATE_BY);
			sb.append(",CREATE_DATE=" + String.valueOf(CREATE_DATE));
			sb.append(",LAST_UPDATE_BY=" + LAST_UPDATE_BY);
			sb.append(",LAST_UPDATE_DATE=" + String.valueOf(LAST_UPDATE_DATE));
			sb.append(",IS_SKIPPED_BY_FINANCE=" + IS_SKIPPED_BY_FINANCE);
			sb.append(",MY_COMMISSION_ID=" + MY_COMMISSION_ID);
			sb.append(",IS_PROTOTYPE=" + String.valueOf(IS_PROTOTYPE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				toOracleStruct toOracle = new toOracleStruct();

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "toOracle");
				}

				int tos_count_tDBOutput_1 = 0;

				int updateKeyCount_tDBOutput_1 = 1;
				if (updateKeyCount_tDBOutput_1 < 1) {
					throw new RuntimeException("For update, the schema must have a key");
				}
				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int tmp_batchUpdateCount_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;

				boolean whetherReject_tDBOutput_1 = false;

				java.sql.Connection conn_tDBOutput_1 = null;

				// optional table
				String dbschema_tDBOutput_1 = null;
				String tableName_tDBOutput_1 = null;
				String driverClass_tDBOutput_1 = "oracle.jdbc.OracleDriver";

				java.lang.Class.forName(driverClass_tDBOutput_1);
				String url_tDBOutput_1 = null;
				url_tDBOutput_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + "10.44.66.245"
						+ ")(port=" + "1521" + "))(connect_data=(service_name=" + "frontend" + ")))";
				String dbUser_tDBOutput_1 = "a_pms_com";

				final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:+uiG1eWfe+DHxtIjSixEwC/6FWItJQ9rp+H5WWBvbx4QpODk");

				String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;
				dbschema_tDBOutput_1 = "A_PMS_COM";

				conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1, dbUser_tDBOutput_1,
						dbPwd_tDBOutput_1);
				resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
				conn_tDBOutput_1.setAutoCommit(false);
				int commitEvery_tDBOutput_1 = 10000;
				int commitCounter_tDBOutput_1 = 0;
				int count_tDBOutput_1 = 0;

				if (dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
					tableName_tDBOutput_1 = ("CONTRACT_MAST");
				} else {
					tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "." + ("CONTRACT_MAST");
				}
				String tableNameForSearch_tDBOutput_1 = "" + ((String) "CONTRACT_MAST") + "";
				String dbschemaForSearch_tDBOutput_1 = null;
				if (dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
					dbschemaForSearch_tDBOutput_1 = ((String) "a_pms_com").toUpperCase();
				} else {
					dbschemaForSearch_tDBOutput_1 = dbschema_tDBOutput_1.toUpperCase();
				}

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_1 = conn_tDBOutput_1.getMetaData();
				if (tableNameForSearch_tDBOutput_1.indexOf("\"") == -1) {
					tableNameForSearch_tDBOutput_1 = tableNameForSearch_tDBOutput_1.toUpperCase();
				} else {
					tableNameForSearch_tDBOutput_1 = tableNameForSearch_tDBOutput_1.replaceAll("\"", "");
				}
				boolean whetherExist_tDBOutput_1 = false;
				try (java.sql.ResultSet rsTable_tDBOutput_1 = dbMetaData_tDBOutput_1.getTables(null,
						dbschemaForSearch_tDBOutput_1, tableNameForSearch_tDBOutput_1, new String[] { "TABLE" })) {
					if (rsTable_tDBOutput_1.next()) {
						whetherExist_tDBOutput_1 = true;
					}
				}

				if (!whetherExist_tDBOutput_1) {
					try (java.sql.Statement stmtCreate_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
						stmtCreate_tDBOutput_1.execute("CREATE TABLE " + tableName_tDBOutput_1
								+ "(CONTRACT_ID VARCHAR(20)   not null ,CONTRACT_DATE DATE default '2019-10-30'  not null ,PARTNER_ID VARCHAR(10)   not null ,REF_CONTRACT VARCHAR(20)  ,PROJECT_NAME VARCHAR(200)  ,SERVICE_CATE VARCHAR(3)  ,SAA_REGION VARCHAR(20)  ,SAA_PROVINCE VARCHAR(100)  ,SAA_SALES_TEAM VARCHAR(20)  ,SAA_SALES_REP VARCHAR(20)  ,REF_SAA VARCHAR(50)  ,REF_DOC VARCHAR(20)  ,EFF_DATE DATE ,EXPR_DATE DATE ,COMMISSION_ID VARCHAR(45)  ,ADDR_SEQ SMALLINT ,CONTACT_SEQ SMALLINT ,AUTH_BY VARCHAR(20)  ,AUTH_DATE DATE ,STATUS VARCHAR(2)  ,REASON_CODE VARCHAR(3)  ,REASON_NOTE CLOB ,CREATE_BY VARCHAR(20)  ,CREATE_DATE DATE ,LAST_UPDATE_BY VARCHAR(20)  ,LAST_UPDATE_DATE DATE ,IS_SKIPPED_BY_FINANCE VARCHAR(10)  default 'NO' ,MY_COMMISSION_ID VARCHAR(45)  ,IS_PROTOTYPE VARCHAR2(3)  default '0' ,primary key(CONTRACT_ID))");
					}
				}
				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement("SELECT COUNT(1) FROM " + tableName_tDBOutput_1 + " WHERE CONTRACT_ID = ?");
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
				String insert_tDBOutput_1 = "INSERT INTO " + tableName_tDBOutput_1
						+ " (CONTRACT_ID,CONTRACT_DATE,PARTNER_ID,REF_CONTRACT,PROJECT_NAME,SERVICE_CATE,SAA_REGION,SAA_PROVINCE,SAA_SALES_TEAM,SAA_SALES_REP,REF_SAA,REF_DOC,EFF_DATE,EXPR_DATE,COMMISSION_ID,ADDR_SEQ,CONTACT_SEQ,AUTH_BY,AUTH_DATE,STATUS,REASON_CODE,REASON_NOTE,CREATE_BY,CREATE_DATE,LAST_UPDATE_BY,LAST_UPDATE_DATE,IS_SKIPPED_BY_FINANCE,MY_COMMISSION_ID,IS_PROTOTYPE) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmtInsert_tDBOutput_1", pstmtInsert_tDBOutput_1);
				String update_tDBOutput_1 = "UPDATE " + tableName_tDBOutput_1
						+ " SET CONTRACT_DATE = ?,PARTNER_ID = ?,REF_CONTRACT = ?,PROJECT_NAME = ?,SERVICE_CATE = ?,SAA_REGION = ?,SAA_PROVINCE = ?,SAA_SALES_TEAM = ?,SAA_SALES_REP = ?,REF_SAA = ?,REF_DOC = ?,EFF_DATE = ?,EXPR_DATE = ?,COMMISSION_ID = ?,ADDR_SEQ = ?,CONTACT_SEQ = ?,AUTH_BY = ?,AUTH_DATE = ?,STATUS = ?,REASON_CODE = ?,REASON_NOTE = ?,CREATE_BY = ?,CREATE_DATE = ?,LAST_UPDATE_BY = ?,LAST_UPDATE_DATE = ?,IS_SKIPPED_BY_FINANCE = ?,MY_COMMISSION_ID = ?,IS_PROTOTYPE = ? WHERE CONTRACT_ID = ?";
				java.sql.PreparedStatement pstmtUpdate_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement(update_tDBOutput_1);
				resourceMap.put("pstmtUpdate_tDBOutput_1", pstmtUpdate_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				toOracleStruct toOracle_tmp = new toOracleStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				java.util.Calendar calendar_tDBInput_1 = java.util.Calendar.getInstance();
				calendar_tDBInput_1.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_1 = calendar_tDBInput_1.getTime();
				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "com.mysql.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = "pms_app";

				final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:RgSgV6kR554XpMeJwxPkN7d8sSDul1OM4K5hK7UPYydQykzNGLjiQ1SG");

				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;

				String url_tDBInput_1 = "jdbc:mysql://" + "10.44.49.9" + ":" + "3306" + "/" + "CAT_PM" + "?"
						+ "noDatetimeStringSync=true";

				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1, dbUser_tDBInput_1,
						dbPwd_tDBInput_1);

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

				String dbquery_tDBInput_1 = "SELECT \n  `CONTRACT_MAST`.`CONTRACT_ID`, \n  `CONTRACT_MAST`.`CONTRACT_DATE`, \n  `CONTRACT_MAST`.`PARTNER_ID`, \n  `CONTR"
						+ "ACT_MAST`.`REF_CONTRACT`, \n  `CONTRACT_MAST`.`PROJECT_NAME`, \n  `CONTRACT_MAST`.`SERVICE_CATE`, \n  `CONTRACT_MAST`.`SAA_"
						+ "REGION`, \n  `CONTRACT_MAST`.`SAA_PROVINCE`, \n  `CONTRACT_MAST`.`SAA_SALES_TEAM`, \n  `CONTRACT_MAST`.`SAA_SALES_REP`, \n  "
						+ "`CONTRACT_MAST`.`REF_SAA`, \n  `CONTRACT_MAST`.`REF_DOC`, \n  `CONTRACT_MAST`.`EFF_DATE`, \n  `CONTRACT_MAST`.`EXPR_DATE`, "
						+ "\n  `CONTRACT_MAST`.`COMMISSION_ID`, \n  `CONTRACT_MAST`.`ADDR_SEQ`, \n  `CONTRACT_MAST`.`CONTACT_SEQ`, \n  `CONTRACT_MAST`."
						+ "`AUTH_BY`, \n  `CONTRACT_MAST`.`AUTH_DATE`, \n  `CONTRACT_MAST`.`STATUS`, \n  `CONTRACT_MAST`.`REASON_CODE`, \n  `CONTRACT_M"
						+ "AST`.`REASON_NOTE`, \n  `CONTRACT_MAST`.`CREATE_BY`, \n  `CONTRACT_MAST`.`CREATE_DATE`, \n  `CONTRACT_MAST`.`LAST_UPDATE_BY"
						+ "`, \n  `CONTRACT_MAST`.`LAST_UPDATE_DATE`, \n  `CONTRACT_MAST`.`IS_SKIPPED_BY_FINANCE`, \n  `CONTRACT_MAST`.`MY_COMMISSION_"
						+ "ID`, \n  `CONTRACT_MAST`.`IS_PROTOTYPE`\nFROM `CONTRACT_MAST`";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row1.CONTRACT_ID = null;
						} else {

							row1.CONTRACT_ID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 1, false);
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							row1.CONTRACT_DATE = null;
						} else {

							if (rs_tDBInput_1.getString(2) != null) {
								String dateString_tDBInput_1 = rs_tDBInput_1.getString(2);
								if (!("0000-00-00").equals(dateString_tDBInput_1)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
									row1.CONTRACT_DATE = rs_tDBInput_1.getTimestamp(2);
								} else {
									row1.CONTRACT_DATE = (java.util.Date) year0_tDBInput_1.clone();
								}
							} else {
								row1.CONTRACT_DATE = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							row1.PARTNER_ID = null;
						} else {

							row1.PARTNER_ID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, false);
						}
						if (colQtyInRs_tDBInput_1 < 4) {
							row1.REF_CONTRACT = null;
						} else {

							row1.REF_CONTRACT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 4, false);
						}
						if (colQtyInRs_tDBInput_1 < 5) {
							row1.PROJECT_NAME = null;
						} else {

							row1.PROJECT_NAME = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, false);
						}
						if (colQtyInRs_tDBInput_1 < 6) {
							row1.SERVICE_CATE = null;
						} else {

							row1.SERVICE_CATE = routines.system.JDBCUtil.getString(rs_tDBInput_1, 6, false);
						}
						if (colQtyInRs_tDBInput_1 < 7) {
							row1.SAA_REGION = null;
						} else {

							row1.SAA_REGION = routines.system.JDBCUtil.getString(rs_tDBInput_1, 7, false);
						}
						if (colQtyInRs_tDBInput_1 < 8) {
							row1.SAA_PROVINCE = null;
						} else {

							row1.SAA_PROVINCE = routines.system.JDBCUtil.getString(rs_tDBInput_1, 8, false);
						}
						if (colQtyInRs_tDBInput_1 < 9) {
							row1.SAA_SALES_TEAM = null;
						} else {

							row1.SAA_SALES_TEAM = routines.system.JDBCUtil.getString(rs_tDBInput_1, 9, false);
						}
						if (colQtyInRs_tDBInput_1 < 10) {
							row1.SAA_SALES_REP = null;
						} else {

							row1.SAA_SALES_REP = routines.system.JDBCUtil.getString(rs_tDBInput_1, 10, false);
						}
						if (colQtyInRs_tDBInput_1 < 11) {
							row1.REF_SAA = null;
						} else {

							row1.REF_SAA = routines.system.JDBCUtil.getString(rs_tDBInput_1, 11, false);
						}
						if (colQtyInRs_tDBInput_1 < 12) {
							row1.REF_DOC = null;
						} else {

							row1.REF_DOC = routines.system.JDBCUtil.getString(rs_tDBInput_1, 12, false);
						}
						if (colQtyInRs_tDBInput_1 < 13) {
							row1.EFF_DATE = null;
						} else {

							if (rs_tDBInput_1.getString(13) != null) {
								String dateString_tDBInput_1 = rs_tDBInput_1.getString(13);
								if (!("0000-00-00").equals(dateString_tDBInput_1)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
									row1.EFF_DATE = rs_tDBInput_1.getTimestamp(13);
								} else {
									row1.EFF_DATE = (java.util.Date) year0_tDBInput_1.clone();
								}
							} else {
								row1.EFF_DATE = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 14) {
							row1.EXPR_DATE = null;
						} else {

							if (rs_tDBInput_1.getString(14) != null) {
								String dateString_tDBInput_1 = rs_tDBInput_1.getString(14);
								if (!("0000-00-00").equals(dateString_tDBInput_1)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
									row1.EXPR_DATE = rs_tDBInput_1.getTimestamp(14);
								} else {
									row1.EXPR_DATE = (java.util.Date) year0_tDBInput_1.clone();
								}
							} else {
								row1.EXPR_DATE = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 15) {
							row1.COMMISSION_ID = null;
						} else {

							row1.COMMISSION_ID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 15, false);
						}
						if (colQtyInRs_tDBInput_1 < 16) {
							row1.ADDR_SEQ = null;
						} else {

							row1.ADDR_SEQ = rs_tDBInput_1.getShort(16);
							if (rs_tDBInput_1.wasNull()) {
								row1.ADDR_SEQ = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 17) {
							row1.CONTACT_SEQ = null;
						} else {

							row1.CONTACT_SEQ = rs_tDBInput_1.getShort(17);
							if (rs_tDBInput_1.wasNull()) {
								row1.CONTACT_SEQ = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 18) {
							row1.AUTH_BY = null;
						} else {

							row1.AUTH_BY = routines.system.JDBCUtil.getString(rs_tDBInput_1, 18, false);
						}
						if (colQtyInRs_tDBInput_1 < 19) {
							row1.AUTH_DATE = null;
						} else {

							if (rs_tDBInput_1.getString(19) != null) {
								String dateString_tDBInput_1 = rs_tDBInput_1.getString(19);
								if (!("0000-00-00").equals(dateString_tDBInput_1)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
									row1.AUTH_DATE = rs_tDBInput_1.getTimestamp(19);
								} else {
									row1.AUTH_DATE = (java.util.Date) year0_tDBInput_1.clone();
								}
							} else {
								row1.AUTH_DATE = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 20) {
							row1.STATUS = null;
						} else {

							row1.STATUS = routines.system.JDBCUtil.getString(rs_tDBInput_1, 20, false);
						}
						if (colQtyInRs_tDBInput_1 < 21) {
							row1.REASON_CODE = null;
						} else {

							row1.REASON_CODE = routines.system.JDBCUtil.getString(rs_tDBInput_1, 21, false);
						}
						if (colQtyInRs_tDBInput_1 < 22) {
							row1.REASON_NOTE = null;
						} else {

							row1.REASON_NOTE = routines.system.JDBCUtil.getString(rs_tDBInput_1, 22, false);
						}
						if (colQtyInRs_tDBInput_1 < 23) {
							row1.CREATE_BY = null;
						} else {

							row1.CREATE_BY = routines.system.JDBCUtil.getString(rs_tDBInput_1, 23, false);
						}
						if (colQtyInRs_tDBInput_1 < 24) {
							row1.CREATE_DATE = null;
						} else {

							if (rs_tDBInput_1.getString(24) != null) {
								String dateString_tDBInput_1 = rs_tDBInput_1.getString(24);
								if (!("0000-00-00").equals(dateString_tDBInput_1)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
									row1.CREATE_DATE = rs_tDBInput_1.getTimestamp(24);
								} else {
									row1.CREATE_DATE = (java.util.Date) year0_tDBInput_1.clone();
								}
							} else {
								row1.CREATE_DATE = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 25) {
							row1.LAST_UPDATE_BY = null;
						} else {

							row1.LAST_UPDATE_BY = routines.system.JDBCUtil.getString(rs_tDBInput_1, 25, false);
						}
						if (colQtyInRs_tDBInput_1 < 26) {
							row1.LAST_UPDATE_DATE = null;
						} else {

							if (rs_tDBInput_1.getString(26) != null) {
								String dateString_tDBInput_1 = rs_tDBInput_1.getString(26);
								if (!("0000-00-00").equals(dateString_tDBInput_1)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
									row1.LAST_UPDATE_DATE = rs_tDBInput_1.getTimestamp(26);
								} else {
									row1.LAST_UPDATE_DATE = (java.util.Date) year0_tDBInput_1.clone();
								}
							} else {
								row1.LAST_UPDATE_DATE = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 27) {
							row1.IS_SKIPPED_BY_FINANCE = null;
						} else {

							row1.IS_SKIPPED_BY_FINANCE = routines.system.JDBCUtil.getString(rs_tDBInput_1, 27, false);
						}
						if (colQtyInRs_tDBInput_1 < 28) {
							row1.MY_COMMISSION_ID = null;
						} else {

							row1.MY_COMMISSION_ID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 28, false);
						}
						if (colQtyInRs_tDBInput_1 < 29) {
							row1.IS_PROTOTYPE = null;
						} else {

							row1.IS_PROTOTYPE = rs_tDBInput_1.getByte(29);
							if (rs_tDBInput_1.wasNull()) {
								row1.IS_PROTOTYPE = null;
							}
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row1");
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
							// ###############################
							// # Output tables

							toOracle = null;

// # Output table : 'toOracle'
							toOracle_tmp.CONTRACT_ID = row1.CONTRACT_ID;
							toOracle_tmp.CONTRACT_DATE = row1.CONTRACT_DATE;
							toOracle_tmp.PARTNER_ID = row1.PARTNER_ID;
							toOracle_tmp.REF_CONTRACT = row1.REF_CONTRACT;
							toOracle_tmp.PROJECT_NAME = row1.PROJECT_NAME;
							toOracle_tmp.SERVICE_CATE = row1.SERVICE_CATE;
							toOracle_tmp.SAA_REGION = row1.SAA_REGION;
							toOracle_tmp.SAA_PROVINCE = row1.SAA_PROVINCE;
							toOracle_tmp.SAA_SALES_TEAM = row1.SAA_SALES_TEAM;
							toOracle_tmp.SAA_SALES_REP = row1.SAA_SALES_REP;
							toOracle_tmp.REF_SAA = row1.REF_SAA;
							toOracle_tmp.REF_DOC = row1.REF_DOC;
							toOracle_tmp.EFF_DATE = row1.EFF_DATE;
							toOracle_tmp.EXPR_DATE = row1.EXPR_DATE;
							toOracle_tmp.COMMISSION_ID = row1.COMMISSION_ID;
							toOracle_tmp.ADDR_SEQ = row1.ADDR_SEQ;
							toOracle_tmp.CONTACT_SEQ = row1.CONTACT_SEQ;
							toOracle_tmp.AUTH_BY = row1.AUTH_BY;
							toOracle_tmp.AUTH_DATE = row1.AUTH_DATE;
							toOracle_tmp.STATUS = row1.STATUS;
							toOracle_tmp.REASON_CODE = row1.REASON_CODE;
							toOracle_tmp.REASON_NOTE = row1.REASON_NOTE;
							toOracle_tmp.CREATE_BY = row1.CREATE_BY;
							toOracle_tmp.CREATE_DATE = row1.CREATE_DATE;
							toOracle_tmp.LAST_UPDATE_BY = row1.LAST_UPDATE_BY;
							toOracle_tmp.LAST_UPDATE_DATE = row1.LAST_UPDATE_DATE;
							toOracle_tmp.IS_SKIPPED_BY_FINANCE = row1.IS_SKIPPED_BY_FINANCE;
							toOracle_tmp.MY_COMMISSION_ID = row1.MY_COMMISSION_ID;
							toOracle_tmp.IS_PROTOTYPE = row1.IS_PROTOTYPE;
							toOracle = toOracle_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */

						/**
						 * [tMap_1 process_data_begin ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_begin ] stop
						 */
// Start of branch "toOracle"
						if (toOracle != null) {

							/**
							 * [tDBOutput_1 main ] start
							 */

							currentComponent = "tDBOutput_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "toOracle");
							}

							whetherReject_tDBOutput_1 = false;
							if (toOracle.CONTRACT_ID == null) {
								pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(1, toOracle.CONTRACT_ID);
							}

							int checkCount_tDBOutput_1 = -1;
							try (java.sql.ResultSet rs_tDBOutput_1 = pstmt_tDBOutput_1.executeQuery()) {
								while (rs_tDBOutput_1.next()) {
									checkCount_tDBOutput_1 = rs_tDBOutput_1.getInt(1);
								}
							}
							if (checkCount_tDBOutput_1 > 0) {
								if (toOracle.CONTRACT_DATE != null) {
									pstmtUpdate_tDBOutput_1.setObject(1,
											new java.sql.Timestamp(toOracle.CONTRACT_DATE.getTime()),
											java.sql.Types.DATE);
								} else {
									pstmtUpdate_tDBOutput_1.setNull(1, java.sql.Types.DATE);
								}

								if (toOracle.PARTNER_ID == null) {
									pstmtUpdate_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(2, toOracle.PARTNER_ID);
								}

								if (toOracle.REF_CONTRACT == null) {
									pstmtUpdate_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(3, toOracle.REF_CONTRACT);
								}

								if (toOracle.PROJECT_NAME == null) {
									pstmtUpdate_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(4, toOracle.PROJECT_NAME);
								}

								if (toOracle.SERVICE_CATE == null) {
									pstmtUpdate_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(5, toOracle.SERVICE_CATE);
								}

								if (toOracle.SAA_REGION == null) {
									pstmtUpdate_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(6, toOracle.SAA_REGION);
								}

								if (toOracle.SAA_PROVINCE == null) {
									pstmtUpdate_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(7, toOracle.SAA_PROVINCE);
								}

								if (toOracle.SAA_SALES_TEAM == null) {
									pstmtUpdate_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(8, toOracle.SAA_SALES_TEAM);
								}

								if (toOracle.SAA_SALES_REP == null) {
									pstmtUpdate_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(9, toOracle.SAA_SALES_REP);
								}

								if (toOracle.REF_SAA == null) {
									pstmtUpdate_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(10, toOracle.REF_SAA);
								}

								if (toOracle.REF_DOC == null) {
									pstmtUpdate_tDBOutput_1.setNull(11, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(11, toOracle.REF_DOC);
								}

								if (toOracle.EFF_DATE != null) {
									pstmtUpdate_tDBOutput_1.setObject(12,
											new java.sql.Timestamp(toOracle.EFF_DATE.getTime()), java.sql.Types.DATE);
								} else {
									pstmtUpdate_tDBOutput_1.setNull(12, java.sql.Types.DATE);
								}

								if (toOracle.EXPR_DATE != null) {
									pstmtUpdate_tDBOutput_1.setObject(13,
											new java.sql.Timestamp(toOracle.EXPR_DATE.getTime()), java.sql.Types.DATE);
								} else {
									pstmtUpdate_tDBOutput_1.setNull(13, java.sql.Types.DATE);
								}

								if (toOracle.COMMISSION_ID == null) {
									pstmtUpdate_tDBOutput_1.setNull(14, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(14, toOracle.COMMISSION_ID);
								}

								if (toOracle.ADDR_SEQ == null) {
									pstmtUpdate_tDBOutput_1.setNull(15, java.sql.Types.INTEGER);
								} else {
									pstmtUpdate_tDBOutput_1.setShort(15, toOracle.ADDR_SEQ);
								}

								if (toOracle.CONTACT_SEQ == null) {
									pstmtUpdate_tDBOutput_1.setNull(16, java.sql.Types.INTEGER);
								} else {
									pstmtUpdate_tDBOutput_1.setShort(16, toOracle.CONTACT_SEQ);
								}

								if (toOracle.AUTH_BY == null) {
									pstmtUpdate_tDBOutput_1.setNull(17, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(17, toOracle.AUTH_BY);
								}

								if (toOracle.AUTH_DATE != null) {
									pstmtUpdate_tDBOutput_1.setObject(18,
											new java.sql.Timestamp(toOracle.AUTH_DATE.getTime()), java.sql.Types.DATE);
								} else {
									pstmtUpdate_tDBOutput_1.setNull(18, java.sql.Types.DATE);
								}

								if (toOracle.STATUS == null) {
									pstmtUpdate_tDBOutput_1.setNull(19, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(19, toOracle.STATUS);
								}

								if (toOracle.REASON_CODE == null) {
									pstmtUpdate_tDBOutput_1.setNull(20, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(20, toOracle.REASON_CODE);
								}

								if (toOracle.REASON_NOTE == null) {
									pstmtUpdate_tDBOutput_1.setNull(21, java.sql.Types.CLOB);
								} else {
									pstmtUpdate_tDBOutput_1.setCharacterStream(21,
											new java.io.StringReader(toOracle.REASON_NOTE),
											toOracle.REASON_NOTE.length());
								}

								if (toOracle.CREATE_BY == null) {
									pstmtUpdate_tDBOutput_1.setNull(22, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(22, toOracle.CREATE_BY);
								}

								if (toOracle.CREATE_DATE != null) {
									pstmtUpdate_tDBOutput_1.setObject(23,
											new java.sql.Timestamp(toOracle.CREATE_DATE.getTime()),
											java.sql.Types.DATE);
								} else {
									pstmtUpdate_tDBOutput_1.setNull(23, java.sql.Types.DATE);
								}

								if (toOracle.LAST_UPDATE_BY == null) {
									pstmtUpdate_tDBOutput_1.setNull(24, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(24, toOracle.LAST_UPDATE_BY);
								}

								if (toOracle.LAST_UPDATE_DATE != null) {
									pstmtUpdate_tDBOutput_1.setObject(25,
											new java.sql.Timestamp(toOracle.LAST_UPDATE_DATE.getTime()),
											java.sql.Types.DATE);
								} else {
									pstmtUpdate_tDBOutput_1.setNull(25, java.sql.Types.DATE);
								}

								if (toOracle.IS_SKIPPED_BY_FINANCE == null) {
									pstmtUpdate_tDBOutput_1.setNull(26, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(26, toOracle.IS_SKIPPED_BY_FINANCE);
								}

								if (toOracle.MY_COMMISSION_ID == null) {
									pstmtUpdate_tDBOutput_1.setNull(27, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(27, toOracle.MY_COMMISSION_ID);
								}

								if (toOracle.IS_PROTOTYPE == null) {
									pstmtUpdate_tDBOutput_1.setNull(28, java.sql.Types.INTEGER);
								} else {
									pstmtUpdate_tDBOutput_1.setByte(28, toOracle.IS_PROTOTYPE);
								}

								if (toOracle.CONTRACT_ID == null) {
									pstmtUpdate_tDBOutput_1.setNull(29 + count_tDBOutput_1, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(29 + count_tDBOutput_1, toOracle.CONTRACT_ID);
								}

								try {
									updatedCount_tDBOutput_1 = updatedCount_tDBOutput_1
											+ pstmtUpdate_tDBOutput_1.executeUpdate();
									nb_line_tDBOutput_1++;
								} catch (java.lang.Exception e_tDBOutput_1) {
									whetherReject_tDBOutput_1 = true;
									nb_line_tDBOutput_1++;
									System.err.print(e_tDBOutput_1.getMessage());
								}
							} else {
								if (toOracle.CONTRACT_ID == null) {
									pstmtInsert_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(1, toOracle.CONTRACT_ID);
								}

								if (toOracle.CONTRACT_DATE != null) {
									pstmtInsert_tDBOutput_1.setObject(2,
											new java.sql.Timestamp(toOracle.CONTRACT_DATE.getTime()),
											java.sql.Types.DATE);
								} else {
									pstmtInsert_tDBOutput_1.setNull(2, java.sql.Types.DATE);
								}

								if (toOracle.PARTNER_ID == null) {
									pstmtInsert_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(3, toOracle.PARTNER_ID);
								}

								if (toOracle.REF_CONTRACT == null) {
									pstmtInsert_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(4, toOracle.REF_CONTRACT);
								}

								if (toOracle.PROJECT_NAME == null) {
									pstmtInsert_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(5, toOracle.PROJECT_NAME);
								}

								if (toOracle.SERVICE_CATE == null) {
									pstmtInsert_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(6, toOracle.SERVICE_CATE);
								}

								if (toOracle.SAA_REGION == null) {
									pstmtInsert_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(7, toOracle.SAA_REGION);
								}

								if (toOracle.SAA_PROVINCE == null) {
									pstmtInsert_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(8, toOracle.SAA_PROVINCE);
								}

								if (toOracle.SAA_SALES_TEAM == null) {
									pstmtInsert_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(9, toOracle.SAA_SALES_TEAM);
								}

								if (toOracle.SAA_SALES_REP == null) {
									pstmtInsert_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(10, toOracle.SAA_SALES_REP);
								}

								if (toOracle.REF_SAA == null) {
									pstmtInsert_tDBOutput_1.setNull(11, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(11, toOracle.REF_SAA);
								}

								if (toOracle.REF_DOC == null) {
									pstmtInsert_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(12, toOracle.REF_DOC);
								}

								if (toOracle.EFF_DATE != null) {
									pstmtInsert_tDBOutput_1.setObject(13,
											new java.sql.Timestamp(toOracle.EFF_DATE.getTime()), java.sql.Types.DATE);
								} else {
									pstmtInsert_tDBOutput_1.setNull(13, java.sql.Types.DATE);
								}

								if (toOracle.EXPR_DATE != null) {
									pstmtInsert_tDBOutput_1.setObject(14,
											new java.sql.Timestamp(toOracle.EXPR_DATE.getTime()), java.sql.Types.DATE);
								} else {
									pstmtInsert_tDBOutput_1.setNull(14, java.sql.Types.DATE);
								}

								if (toOracle.COMMISSION_ID == null) {
									pstmtInsert_tDBOutput_1.setNull(15, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(15, toOracle.COMMISSION_ID);
								}

								if (toOracle.ADDR_SEQ == null) {
									pstmtInsert_tDBOutput_1.setNull(16, java.sql.Types.INTEGER);
								} else {
									pstmtInsert_tDBOutput_1.setShort(16, toOracle.ADDR_SEQ);
								}

								if (toOracle.CONTACT_SEQ == null) {
									pstmtInsert_tDBOutput_1.setNull(17, java.sql.Types.INTEGER);
								} else {
									pstmtInsert_tDBOutput_1.setShort(17, toOracle.CONTACT_SEQ);
								}

								if (toOracle.AUTH_BY == null) {
									pstmtInsert_tDBOutput_1.setNull(18, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(18, toOracle.AUTH_BY);
								}

								if (toOracle.AUTH_DATE != null) {
									pstmtInsert_tDBOutput_1.setObject(19,
											new java.sql.Timestamp(toOracle.AUTH_DATE.getTime()), java.sql.Types.DATE);
								} else {
									pstmtInsert_tDBOutput_1.setNull(19, java.sql.Types.DATE);
								}

								if (toOracle.STATUS == null) {
									pstmtInsert_tDBOutput_1.setNull(20, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(20, toOracle.STATUS);
								}

								if (toOracle.REASON_CODE == null) {
									pstmtInsert_tDBOutput_1.setNull(21, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(21, toOracle.REASON_CODE);
								}

								if (toOracle.REASON_NOTE == null) {
									pstmtInsert_tDBOutput_1.setNull(22, java.sql.Types.CLOB);
								} else {
									pstmtInsert_tDBOutput_1.setCharacterStream(22,
											new java.io.StringReader(toOracle.REASON_NOTE),
											toOracle.REASON_NOTE.length());
								}

								if (toOracle.CREATE_BY == null) {
									pstmtInsert_tDBOutput_1.setNull(23, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(23, toOracle.CREATE_BY);
								}

								if (toOracle.CREATE_DATE != null) {
									pstmtInsert_tDBOutput_1.setObject(24,
											new java.sql.Timestamp(toOracle.CREATE_DATE.getTime()),
											java.sql.Types.DATE);
								} else {
									pstmtInsert_tDBOutput_1.setNull(24, java.sql.Types.DATE);
								}

								if (toOracle.LAST_UPDATE_BY == null) {
									pstmtInsert_tDBOutput_1.setNull(25, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(25, toOracle.LAST_UPDATE_BY);
								}

								if (toOracle.LAST_UPDATE_DATE != null) {
									pstmtInsert_tDBOutput_1.setObject(26,
											new java.sql.Timestamp(toOracle.LAST_UPDATE_DATE.getTime()),
											java.sql.Types.DATE);
								} else {
									pstmtInsert_tDBOutput_1.setNull(26, java.sql.Types.DATE);
								}

								if (toOracle.IS_SKIPPED_BY_FINANCE == null) {
									pstmtInsert_tDBOutput_1.setNull(27, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(27, toOracle.IS_SKIPPED_BY_FINANCE);
								}

								if (toOracle.MY_COMMISSION_ID == null) {
									pstmtInsert_tDBOutput_1.setNull(28, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(28, toOracle.MY_COMMISSION_ID);
								}

								if (toOracle.IS_PROTOTYPE == null) {
									pstmtInsert_tDBOutput_1.setNull(29, java.sql.Types.INTEGER);
								} else {
									pstmtInsert_tDBOutput_1.setByte(29, toOracle.IS_PROTOTYPE);
								}

								try {
									insertedCount_tDBOutput_1 = insertedCount_tDBOutput_1
											+ pstmtInsert_tDBOutput_1.executeUpdate();
									nb_line_tDBOutput_1++;
								} catch (java.lang.Exception e_tDBOutput_1) {
									whetherReject_tDBOutput_1 = true;
									nb_line_tDBOutput_1++;
									System.err.print(e_tDBOutput_1.getMessage());
								}
							}
							commitCounter_tDBOutput_1++;
							if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {

								conn_tDBOutput_1.commit();
								commitCounter_tDBOutput_1 = 0;
							}

							tos_count_tDBOutput_1++;

							/**
							 * [tDBOutput_1 main ] stop
							 */

							/**
							 * [tDBOutput_1 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_1";

							/**
							 * [tDBOutput_1 process_data_begin ] stop
							 */

							/**
							 * [tDBOutput_1 process_data_end ] start
							 */

							currentComponent = "tDBOutput_1";

							/**
							 * [tDBOutput_1 process_data_end ] stop
							 */

						} // End of branch "toOracle"

						/**
						 * [tMap_1 process_data_end ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
					if (conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {

						conn_tDBInput_1.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}

				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				if (pstmtUpdate_tDBOutput_1 != null) {
					pstmtUpdate_tDBOutput_1.close();
					resourceMap.remove("pstmtUpdate_tDBOutput_1");
				}
				if (pstmtInsert_tDBOutput_1 != null) {
					pstmtInsert_tDBOutput_1.close();
					resourceMap.remove("pstmtInsert_tDBOutput_1");
				}
				if (pstmt_tDBOutput_1 != null) {
					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");
				}
				resourceMap.put("statementClosed_tDBOutput_1", true);
				if (commitCounter_tDBOutput_1 > 0) {

					conn_tDBOutput_1.commit();

				}

				conn_tDBOutput_1.close();

				resourceMap.put("finish_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "toOracle");
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
						java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_1 = null;
						if ((pstmtUpdateToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtUpdate_tDBOutput_1")) != null) {
							pstmtUpdateToClose_tDBOutput_1.close();
						}
						java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_1 = null;
						if ((pstmtInsertToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtInsert_tDBOutput_1")) != null) {
							pstmtInsertToClose_tDBOutput_1.close();
						}
						java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
						if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_1")) != null) {
							pstmtToClose_tDBOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_1") == null) {
						java.sql.Connection ctn_tDBOutput_1 = null;
						if ((ctn_tDBOutput_1 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_1")) != null) {
							try {
								ctn_tDBOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_1) {
								String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :"
										+ sqlEx_tDBOutput_1.getMessage();
								System.err.println(errorMessage_tDBOutput_1);
							}
						}
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final loadContractMast loadContractMastClass = new loadContractMast();

		int exitCode = loadContractMastClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = loadContractMast.class.getClassLoader().getResourceAsStream(
					"commission_report/loadcontractmast_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = loadContractMast.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_1) {
			globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

			e_tDBInput_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println(
					(endUsedMemory - startUsedMemory) + " bytes memory increase when running : loadContractMast");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 96297 characters generated by Talend Open Studio for Data Integration on the
 * March 29, 2021 5:52:02 PM ICT
 ************************************************************************************************/